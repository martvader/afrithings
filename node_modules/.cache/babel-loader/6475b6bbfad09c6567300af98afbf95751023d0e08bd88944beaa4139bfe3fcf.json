{"ast":null,"code":"function flattenConnection(connection) {\n  if (!connection) {\n    const noConnectionErr = `flattenConnection(): needs a 'connection' to flatten, but received '${connection ?? \"\"}' instead.`;\n    {\n      throw new Error(noConnectionErr);\n    }\n  }\n  if (\"nodes\" in connection) {\n    return connection.nodes;\n  }\n  if (\"edges\" in connection && Array.isArray(connection.edges)) {\n    return connection.edges.map(edge => {\n      if (!(edge == null ? void 0 : edge.node)) {\n        throw new Error(\"flattenConnection(): Connection edges must contain nodes\");\n      }\n      return edge.node;\n    });\n  }\n  {\n    console.warn(`flattenConnection(): The connection did not contain either \"nodes\" or \"edges.node\". Returning an empty array.`);\n  }\n  return [];\n}\nexport { flattenConnection };","map":{"version":3,"names":["flattenConnection","connection","noConnectionErr","Error","nodes","Array","isArray","edges","map","edge","node","console","warn"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/flatten-connection.ts"],"sourcesContent":["import type {PartialDeep} from 'type-fest';\n\n/**\n * The `flattenConnection` utility transforms a connection object from the Storefront API (for example, [Product-related connections](https://shopify.dev/api/storefront/reference/products/product)) into a flat array of nodes.\n * The utility works with either `nodes` or `edges.node`.\n *\n * If `connection` is null or undefined, will return an empty array instead in production. In development, an error will be thrown.\n */\nexport function flattenConnection<\n  ConnectionGeneric extends\n    | PartialDeep<ConnectionEdges, {recurseIntoArrays: true}>\n    | PartialDeep<ConnectionNodes, {recurseIntoArrays: true}>\n    | ConnectionEdges\n    | ConnectionNodes,\n>(\n  connection?: ConnectionGeneric,\n): ConnectionGeneric extends\n  | {\n      edges: {node: Array<infer ConnectionBaseType>};\n    }\n  | {\n      nodes: Array<infer ConnectionBaseType>;\n    }\n  ? // if it's not a PartialDeep, then return the infered type\n    ConnectionBaseType[]\n  : ConnectionGeneric extends\n      | PartialDeep<\n          {edges: {node: Array<infer ConnectionBaseType>}},\n          {recurseIntoArrays: true}\n        >\n      | PartialDeep<\n          {\n            nodes: Array<infer ConnectionBaseType>;\n          },\n          {recurseIntoArrays: true}\n        >\n  ? // if it is a PartialDeep, return a PartialDeep inferred type\n    PartialDeep<ConnectionBaseType[], {recurseIntoArrays: true}>\n  : never {\n  if (!connection) {\n    const noConnectionErr = `flattenConnection(): needs a 'connection' to flatten, but received '${\n      connection ?? ''\n    }' instead.`;\n    if (__HYDROGEN_DEV__) {\n      throw new Error(noConnectionErr);\n    } else {\n      console.error(noConnectionErr + ` Returning an empty array`);\n      // @ts-expect-error We don't want to crash prod, so return an empty array\n      return [];\n    }\n  }\n\n  if ('nodes' in connection) {\n    // @ts-expect-error return type is failing\n    return connection.nodes;\n  }\n\n  if ('edges' in connection && Array.isArray(connection.edges)) {\n    // @ts-expect-error return type is failing\n    return connection.edges.map((edge) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (!edge?.node) {\n        throw new Error(\n          'flattenConnection(): Connection edges must contain nodes',\n        );\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n      return edge.node;\n    }) as Array<unknown>;\n  }\n\n  if (__HYDROGEN_DEV__) {\n    console.warn(\n      `flattenConnection(): The connection did not contain either \"nodes\" or \"edges.node\". Returning an empty array.`,\n    );\n  }\n\n  // @ts-expect-error We don't want to crash prod, so return an empty array\n  return [];\n}\n\ntype ConnectionEdges = {\n  edges: {node: Array<unknown>};\n};\n\ntype ConnectionNodes = {\n  nodes: Array<unknown>;\n};\n\n// This is only for documentation purposes, and it is not used in the code.\nexport interface ConnectionGenericForDoc {\n  connection?: ConnectionEdges | ConnectionNodes;\n}\nexport type FlattenConnectionReturnForDoc = Array<unknown>;\n"],"mappings":"AAQO,SAASA,kBAOdC,UAAA,EAuBQ;EACR,IAAI,CAACA,UAAA,EAAY;IACT,MAAAC,eAAA,GAAkB,uEACtBD,UAAA,IAAc;IAEM;MACd,UAAIE,KAAA,CAAMD,eAAe;IAKjC;EACF;EAEA,IAAI,WAAWD,UAAA,EAAY;IAEzB,OAAOA,UAAA,CAAWG,KAAA;EACpB;EAEA,IAAI,WAAWH,UAAA,IAAcI,KAAA,CAAMC,OAAA,CAAQL,UAAA,CAAWM,KAAK,GAAG;IAE5D,OAAON,UAAA,CAAWM,KAAA,CAAMC,GAAA,CAAKC,IAAA,IAAS;MAEhC,MAACA,IAAA,oBAAAA,IAAA,CAAMC,IAAA,GAAM;QACf,MAAM,IAAIP,KAAA,CACR;MAEJ;MAEA,OAAOM,IAAA,CAAKC,IAAA;IAAA,CACb;EACH;EAEsB;IACZC,OAAA,CAAAC,IAAA,CACN;EAEJ;EAGA,OAAO;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}