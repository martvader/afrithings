{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nconst IMAGE_FRAGMENT = `#graphql\n  fragment Image on Image {\n    altText\n    url\n    width\n    height\n  }\n`;\nconst Image = React.forwardRef((_ref, ref) => {\n  let {\n    alt,\n    aspectRatio,\n    crop = \"center\",\n    data,\n    decoding = \"async\",\n    height = \"auto\",\n    loader = shopifyLoader,\n    loaderOptions,\n    loading = \"lazy\",\n    sizes,\n    src,\n    srcSetOptions = {\n      intervals: 15,\n      startingWidth: 200,\n      incrementSize: 200,\n      placeholderWidth: 100\n    },\n    width = \"100%\",\n    widths,\n    ...passthroughProps\n  } = _ref;\n  {\n    if (loaderOptions) {\n      console.warn([`Deprecated property from original Image component in use:`, `Use the \\`crop\\`, \\`width\\`, \\`height\\`, and src props, or`, `the \\`data\\` prop to achieve the same result. Image used is ${src || (data == null ? void 0 : data.url) || (passthroughProps == null ? void 0 : passthroughProps.key) || \"unknown\"}`].join(\" \"));\n    }\n    if (widths) {\n      console.warn([`Deprecated property from original Image component in use:`, `\\`widths\\` are now calculated automatically based on the`, `config and width props. Image used is ${src || (data == null ? void 0 : data.url) || (passthroughProps == null ? void 0 : passthroughProps.key) || \"unknown\"}`].join(\" \"));\n    }\n  }\n  const normalizedData = React.useMemo(() => {\n    const dataWidth = (data == null ? void 0 : data.width) && (data == null ? void 0 : data.height) ? data == null ? void 0 : data.width : void 0;\n    const dataHeight = (data == null ? void 0 : data.width) && (data == null ? void 0 : data.height) ? data == null ? void 0 : data.height : void 0;\n    return {\n      width: dataWidth,\n      height: dataHeight,\n      unitsMatch: Boolean(unitsMatch(dataWidth, dataHeight))\n    };\n  }, [data]);\n  const normalizedProps = React.useMemo(() => {\n    const nWidthProp = width || \"100%\";\n    const widthParts = getUnitValueParts(nWidthProp.toString());\n    const nWidth = `${widthParts.number}${widthParts.unit}`;\n    const autoHeight = height === void 0 || height === null;\n    const heightParts = autoHeight ? null : getUnitValueParts(height.toString());\n    const fixedHeight = heightParts ? `${heightParts.number}${heightParts.unit}` : \"\";\n    const nHeight = autoHeight ? \"auto\" : fixedHeight;\n    const nSrc = src || (data == null ? void 0 : data.url);\n    if (!nSrc) {\n      console.warn(`No src or data.url provided to Image component.`, (passthroughProps == null ? void 0 : passthroughProps.key) || \"\");\n    }\n    const nAlt = (data == null ? void 0 : data.altText) && !alt ? data == null ? void 0 : data.altText : alt || \"\";\n    const nAspectRatio = aspectRatio ? aspectRatio : normalizedData.unitsMatch ? [getNormalizedFixedUnit(normalizedData.width), getNormalizedFixedUnit(normalizedData.height)].join(\"/\") : void 0;\n    return {\n      width: nWidth,\n      height: nHeight,\n      src: nSrc,\n      alt: nAlt,\n      aspectRatio: nAspectRatio\n    };\n  }, [width, height, src, data, alt, aspectRatio, normalizedData, passthroughProps == null ? void 0 : passthroughProps.key]);\n  const {\n    intervals,\n    startingWidth,\n    incrementSize,\n    placeholderWidth\n  } = srcSetOptions;\n  const imageWidths = React.useMemo(() => {\n    return generateImageWidths(width, intervals, startingWidth, incrementSize);\n  }, [width, intervals, startingWidth, incrementSize]);\n  const fixedWidth = isFixedWidth(normalizedProps.width);\n  if (!sizes && !fixedWidth) {\n    console.warn([\"No sizes prop provided to Image component,\", \"you may be loading unnecessarily large images.\", `Image used is ${src || (data == null ? void 0 : data.url) || (passthroughProps == null ? void 0 : passthroughProps.key) || \"unknown\"}`].join(\" \"));\n  }\n  if (fixedWidth) {\n    return /* @__PURE__ */jsx(FixedWidthImage, {\n      aspectRatio,\n      crop,\n      decoding,\n      height,\n      imageWidths,\n      loader,\n      loading,\n      normalizedProps,\n      passthroughProps,\n      ref,\n      width\n    });\n  } else {\n    return /* @__PURE__ */jsx(FluidImage, {\n      aspectRatio,\n      crop,\n      decoding,\n      imageWidths,\n      loader,\n      loading,\n      normalizedProps,\n      passthroughProps,\n      placeholderWidth,\n      ref,\n      sizes\n    });\n  }\n});\nfunction FixedWidthImage(_ref2) {\n  let {\n    aspectRatio,\n    crop,\n    decoding,\n    height,\n    imageWidths,\n    loader = shopifyLoader,\n    loading,\n    normalizedProps,\n    passthroughProps,\n    ref,\n    width\n  } = _ref2;\n  const fixed = React.useMemo(() => {\n    const intWidth = getNormalizedFixedUnit(width);\n    const intHeight = getNormalizedFixedUnit(height);\n    const fixedAspectRatio = aspectRatio ? aspectRatio : unitsMatch(normalizedProps.width, normalizedProps.height) ? [intWidth, intHeight].join(\"/\") : normalizedProps.aspectRatio ? normalizedProps.aspectRatio : void 0;\n    const sizesArray = imageWidths === void 0 ? void 0 : generateSizes(imageWidths, fixedAspectRatio, crop);\n    const fixedHeight = intHeight ? intHeight : fixedAspectRatio && intWidth ? intWidth * (parseAspectRatio(fixedAspectRatio) ?? 1) : void 0;\n    const srcSet = generateSrcSet(normalizedProps.src, sizesArray, loader);\n    const src = loader({\n      src: normalizedProps.src,\n      width: intWidth,\n      height: fixedHeight,\n      crop: normalizedProps.height === \"auto\" ? void 0 : crop\n    });\n    return {\n      width: intWidth,\n      aspectRatio: fixedAspectRatio,\n      height: fixedHeight,\n      srcSet,\n      src\n    };\n  }, [aspectRatio, crop, height, imageWidths, loader, normalizedProps, width]);\n  return /* @__PURE__ */jsx(\"img\", {\n    ref,\n    alt: normalizedProps.alt,\n    decoding,\n    height: fixed.height,\n    loading,\n    src: fixed.src,\n    srcSet: fixed.srcSet,\n    width: fixed.width,\n    style: {\n      aspectRatio: fixed.aspectRatio,\n      ...passthroughProps.style\n    },\n    ...passthroughProps\n  });\n}\nfunction FluidImage(_ref3) {\n  let {\n    crop,\n    decoding,\n    imageWidths,\n    loader = shopifyLoader,\n    loading,\n    normalizedProps,\n    passthroughProps,\n    placeholderWidth,\n    ref,\n    sizes\n  } = _ref3;\n  const fluid = React.useMemo(() => {\n    const sizesArray = imageWidths === void 0 ? void 0 : generateSizes(imageWidths, normalizedProps.aspectRatio, crop);\n    const placeholderHeight = normalizedProps.aspectRatio && placeholderWidth ? placeholderWidth * (parseAspectRatio(normalizedProps.aspectRatio) ?? 1) : void 0;\n    const srcSet = generateSrcSet(normalizedProps.src, sizesArray, loader);\n    const src = loader({\n      src: normalizedProps.src,\n      width: placeholderWidth,\n      height: placeholderHeight,\n      crop\n    });\n    return {\n      placeholderHeight,\n      srcSet,\n      src\n    };\n  }, [crop, imageWidths, loader, normalizedProps, placeholderWidth]);\n  return /* @__PURE__ */jsx(\"img\", {\n    ref,\n    alt: normalizedProps.alt,\n    decoding,\n    height: fluid.placeholderHeight,\n    loading,\n    sizes,\n    src: fluid.src,\n    srcSet: fluid.srcSet,\n    width: placeholderWidth,\n    ...passthroughProps,\n    style: {\n      width: normalizedProps.width,\n      aspectRatio: normalizedProps.aspectRatio,\n      ...passthroughProps.style\n    }\n  });\n}\nfunction shopifyLoader(_ref4) {\n  let {\n    src,\n    width,\n    height,\n    crop\n  } = _ref4;\n  if (!src) {\n    return \"\";\n  }\n  const url = new URL(src);\n  if (width) {\n    url.searchParams.append(\"width\", Math.round(width).toString());\n  }\n  if (height) {\n    url.searchParams.append(\"height\", Math.round(height).toString());\n  }\n  if (crop) {\n    url.searchParams.append(\"crop\", crop);\n  }\n  return url.href;\n}\nfunction unitsMatch() {\n  let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"100%\";\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"auto\";\n  return getUnitValueParts(width.toString()).unit === getUnitValueParts(height.toString()).unit;\n}\nfunction getUnitValueParts(value) {\n  const unit = value.replace(/[0-9.]/g, \"\");\n  const number = parseFloat(value.replace(unit, \"\"));\n  return {\n    unit: unit === \"\" ? number === void 0 ? \"auto\" : \"px\" : unit,\n    number\n  };\n}\nfunction getNormalizedFixedUnit(value) {\n  if (value === void 0) {\n    return;\n  }\n  const {\n    unit,\n    number\n  } = getUnitValueParts(value.toString());\n  switch (unit) {\n    case \"em\":\n      return number * 16;\n    case \"rem\":\n      return number * 16;\n    case \"px\":\n      return number;\n    case \"\":\n      return number;\n    default:\n      return;\n  }\n}\nfunction isFixedWidth(width) {\n  const fixedEndings = /\\d(px|em|rem)$/;\n  return typeof width === \"number\" || typeof width === \"string\" && fixedEndings.test(width);\n}\nfunction generateSrcSet(src, sizesArray) {\n  let loader = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : shopifyLoader;\n  if (!src) {\n    return \"\";\n  }\n  if ((sizesArray == null ? void 0 : sizesArray.length) === 0 || !sizesArray) {\n    return src;\n  }\n  return sizesArray.map((size, i) => `${loader({\n    src,\n    width: size.width,\n    height: size.height,\n    crop: size.crop\n  })} ${sizesArray.length === 3 ? `${i + 1}x` : `${size.width ?? 0}w`}`).join(`, `);\n}\nfunction generateImageWidths() {\n  let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"100%\";\n  let intervals = arguments.length > 1 ? arguments[1] : undefined;\n  let startingWidth = arguments.length > 2 ? arguments[2] : undefined;\n  let incrementSize = arguments.length > 3 ? arguments[3] : undefined;\n  const responsive = Array.from({\n    length: intervals\n  }, (_, i) => i * incrementSize + startingWidth);\n  const fixed = Array.from({\n    length: 3\n  }, (_, i) => (i + 1) * (getNormalizedFixedUnit(width) ?? 0));\n  return isFixedWidth(width) ? fixed : responsive;\n}\nfunction parseAspectRatio(aspectRatio) {\n  if (!aspectRatio) return;\n  const [width, height] = aspectRatio.split(\"/\");\n  return 1 / (Number(width) / Number(height));\n}\nfunction generateSizes(imageWidths, aspectRatio) {\n  let crop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"center\";\n  if (!imageWidths) return;\n  const sizes = imageWidths.map(width => {\n    return {\n      width,\n      height: aspectRatio ? width * (parseAspectRatio(aspectRatio) ?? 1) : void 0,\n      crop\n    };\n  });\n  return sizes;\n}\nexport { IMAGE_FRAGMENT, Image, generateImageWidths, generateSizes, generateSrcSet, parseAspectRatio, shopifyLoader };","map":{"version":3,"names":["IMAGE_FRAGMENT","Image","React","forwardRef","_ref","ref","alt","aspectRatio","crop","data","decoding","height","loader","shopifyLoader","loaderOptions","loading","sizes","src","srcSetOptions","intervals","startingWidth","incrementSize","placeholderWidth","width","widths","passthroughProps","console","warn","url","key","join","normalizedData","useMemo","dataWidth","dataHeight","unitsMatch","Boolean","normalizedProps","nWidthProp","widthParts","getUnitValueParts","toString","nWidth","number","unit","autoHeight","heightParts","fixedHeight","nHeight","nSrc","nAlt","altText","nAspectRatio","getNormalizedFixedUnit","imageWidths","generateImageWidths","fixedWidth","isFixedWidth","jsx","FixedWidthImage","FluidImage","_ref2","fixed","intWidth","intHeight","fixedAspectRatio","sizesArray","generateSizes","parseAspectRatio","srcSet","generateSrcSet","style","_ref3","fluid","placeholderHeight","_ref4","URL","searchParams","append","Math","round","href","arguments","length","undefined","value","replace","parseFloat","fixedEndings","test","map","size","i","responsive","Array","from","_","split","Number"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/Image.tsx"],"sourcesContent":["/* eslint-disable eslint-comments/disable-enable-pair */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable hydrogen/prefer-image-component */\nimport * as React from 'react';\nimport type {PartialDeep} from 'type-fest';\nimport type {Image as ImageType} from './storefront-api-types.js';\n\n/*\n * An optional prop you can use to change the\n * default srcSet generation behaviour\n */\ntype SrcSetOptions = {\n  intervals: number;\n  startingWidth: number;\n  incrementSize: number;\n  placeholderWidth: number;\n};\n\ntype HtmlImageProps = React.DetailedHTMLProps<\n  React.ImgHTMLAttributes<HTMLImageElement>,\n  HTMLImageElement\n>;\n\ntype NormalizedProps = {\n  alt: string;\n  aspectRatio: string | undefined;\n  height: string;\n  src: string | undefined;\n  width: string;\n};\n\nexport type LoaderParams = {\n  /** The base URL of the image */\n  src?: ImageType['url'];\n  /** The URL param that controls width */\n  width?: number;\n  /** The URL param that controls height */\n  height?: number;\n  /** The URL param that controls the cropping region */\n  crop?: Crop;\n};\n\nexport type Loader = (params: LoaderParams) => string;\n\n/** Legacy type for backwards compatibility *\n * @deprecated Use `crop`, `width`, `height`, and `src` props, and/or `data` prop. Or pass a custom `loader` with `LoaderParams` */\nexport type ShopifyLoaderOptions = {\n  /** The base URL of the image */\n  src?: ImageType['url'];\n  /** The URL param that controls width */\n  width?: HtmlImageProps['width'] | ImageType['width'];\n  /** The URL param that controls height */\n  height?: HtmlImageProps['height'] | ImageType['height'];\n  /** The URL param that controls the cropping region */\n  crop?: Crop;\n};\n\n/*\n * @TODO: Expand to include focal point support; and/or switch this to be an SF API type\n */\ntype Crop = 'center' | 'top' | 'bottom' | 'left' | 'right';\n\nexport type HydrogenImageProps = React.ImgHTMLAttributes<HTMLImageElement> & {\n  /** The aspect ratio of the image, in the format of `width/height`.\n   *\n   * @example\n   * ```\n   * <Image data={productImage} aspectRatio=\"4/5\" />\n   * ```\n   */\n  aspectRatio?: string;\n  /** The crop position of the image.\n   *\n   * @remarks\n   * In the event that AspectRatio is set, without specifying a crop,\n   * the Shopify CDN won't return the expected image.\n   *\n   * @defaultValue `center`\n   */\n  crop?: Crop;\n  /** Data mapping to the Storefront API `Image` object. Must be an Image object.\n   * Optionally, import the `IMAGE_FRAGMENT` to use in your GraphQL queries.\n   *\n   * @example\n   * ```\n   * import {IMAGE_FRAGMENT, Image} from '@shopify/hydrogen';\n   *\n   * export const IMAGE_QUERY = `#graphql\n   * ${IMAGE_FRAGMENT}\n   * query {\n   *   product {\n   *     featuredImage {\n   *       ...Image\n   *     }\n   *   }\n   * }`\n   *\n   * <Image\n   *   data={productImage}\n   *   sizes=\"(min-width: 45em) 50vw, 100vw\"\n   *   aspectRatio=\"4/5\"\n   * />\n   * ```\n   *\n   * Image: {@link https://shopify.dev/api/storefront/reference/common-objects/image}\n   */\n  data?: PartialDeep<ImageType, {recurseIntoArrays: true}>;\n  key?: React.Key;\n  /** A function that returns a URL string for an image.\n   *\n   * @remarks\n   * By default, this uses Shopify’s CDN {@link https://cdn.shopify.com/} but you can provide\n   * your own function to use a another provider, as long as they support URL based image transformations.\n   */\n  loader?: Loader;\n  /** @deprecated Use `crop`, `width`, `height`, and `src` props, and/or `data` prop */\n  loaderOptions?: ShopifyLoaderOptions;\n  /** An optional prop you can use to change the default srcSet generation behaviour */\n  srcSetOptions?: SrcSetOptions;\n  /** @deprecated Autocalculated, use only `width` prop, or srcSetOptions */\n  widths?: (HtmlImageProps['width'] | ImageType['width'])[];\n};\n\n/**\n * A Storefront API GraphQL fragment that can be used to query for an image.\n */\nexport const IMAGE_FRAGMENT = `#graphql\n  fragment Image on Image {\n    altText\n    url\n    width\n    height\n  }\n`;\n\n/**\n * Hydrgen’s Image component is a wrapper around the HTML image element.\n * It supports the same props as the HTML `img` element, but automatically\n * generates the srcSet and sizes attributes for you. For most use cases,\n * you’ll want to set the `aspectRatio` prop to ensure the image is sized\n * correctly.\n *\n * @remarks\n * - `decoding` is set to `async` by default.\n * - `loading` is set to `lazy` by default.\n * - `alt` will automatically be set to the `altText` from the Storefront API if passed in the `data` prop\n * - `src` will automatically be set to the `url` from the Storefront API if passed in the `data` prop\n *\n * @example\n * A responsive image with a 4:5 aspect ratio:\n * ```\n * <Image\n *   data={product.featuredImage}\n *   aspectRatio=\"4/5\"\n *   sizes=\"(min-width: 45em) 40vw, 100vw\"\n * />\n * ```\n * @example\n * A fixed size image:\n * ```\n * <Image\n *   data={product.featuredImage}\n *   width={100}\n *   height={100}\n * />\n * ```\n *\n * {@link https://shopify.dev/docs/api/hydrogen-react/components/image}\n */\nexport const Image = React.forwardRef<HTMLImageElement, HydrogenImageProps>(\n  (\n    {\n      alt,\n      aspectRatio,\n      crop = 'center',\n      data,\n      decoding = 'async',\n      height = 'auto',\n      loader = shopifyLoader,\n      loaderOptions,\n      loading = 'lazy',\n      sizes,\n      src,\n      srcSetOptions = {\n        intervals: 15,\n        startingWidth: 200,\n        incrementSize: 200,\n        placeholderWidth: 100,\n      },\n      width = '100%',\n      widths,\n      ...passthroughProps\n    },\n    ref,\n  ) => {\n    /*\n     * Deprecated Props from original Image component\n     */\n    if (__HYDROGEN_DEV__) {\n      if (loaderOptions) {\n        console.warn(\n          [\n            `Deprecated property from original Image component in use:`,\n            `Use the \\`crop\\`, \\`width\\`, \\`height\\`, and src props, or`,\n            `the \\`data\\` prop to achieve the same result. Image used is ${\n              src || data?.url || passthroughProps?.key || 'unknown'\n            }`,\n          ].join(' '),\n        );\n      }\n\n      if (widths) {\n        console.warn(\n          [\n            `Deprecated property from original Image component in use:`,\n            `\\`widths\\` are now calculated automatically based on the`,\n            `config and width props. Image used is ${\n              src || data?.url || passthroughProps?.key || 'unknown'\n            }`,\n          ].join(' '),\n        );\n      }\n    }\n\n    /*\n     * Gets normalized values for width, height from data  prop\n     */\n    const normalizedData = React.useMemo(() => {\n      /* Only use data width if height is also set */\n      const dataWidth: number | undefined =\n        data?.width && data?.height ? data?.width : undefined;\n\n      const dataHeight: number | undefined =\n        data?.width && data?.height ? data?.height : undefined;\n\n      return {\n        width: dataWidth,\n        height: dataHeight,\n        unitsMatch: Boolean(unitsMatch(dataWidth, dataHeight)),\n      };\n    }, [data]);\n\n    /*\n     * Gets normalized values for width, height, src, alt, and aspectRatio props\n     * supporting the presence of `data` in addition to flat props.\n     */\n    const normalizedProps = React.useMemo(() => {\n      const nWidthProp: string | number = width || '100%';\n      const widthParts = getUnitValueParts(nWidthProp.toString());\n      const nWidth = `${widthParts.number}${widthParts.unit}`;\n\n      const autoHeight = height === undefined || height === null;\n      const heightParts = autoHeight\n        ? null\n        : getUnitValueParts(height.toString());\n\n      const fixedHeight = heightParts\n        ? `${heightParts.number}${heightParts.unit}`\n        : '';\n\n      const nHeight = autoHeight ? 'auto' : fixedHeight;\n\n      const nSrc: string | undefined = src || data?.url;\n\n      if (__HYDROGEN_DEV__ && !nSrc) {\n        console.warn(\n          `No src or data.url provided to Image component.`,\n          passthroughProps?.key || '',\n        );\n      }\n\n      const nAlt: string = data?.altText && !alt ? data?.altText : alt || '';\n\n      const nAspectRatio: string | undefined = aspectRatio\n        ? aspectRatio\n        : normalizedData.unitsMatch\n        ? [\n            getNormalizedFixedUnit(normalizedData.width),\n            getNormalizedFixedUnit(normalizedData.height),\n          ].join('/')\n        : undefined;\n\n      return {\n        width: nWidth,\n        height: nHeight,\n        src: nSrc,\n        alt: nAlt,\n        aspectRatio: nAspectRatio,\n      };\n    }, [\n      width,\n      height,\n      src,\n      data,\n      alt,\n      aspectRatio,\n      normalizedData,\n      passthroughProps?.key,\n    ]);\n\n    const {intervals, startingWidth, incrementSize, placeholderWidth} =\n      srcSetOptions;\n\n    /*\n     * This function creates an array of widths to be used in srcSet\n     */\n    const imageWidths = React.useMemo(() => {\n      return generateImageWidths(\n        width,\n        intervals,\n        startingWidth,\n        incrementSize,\n      );\n    }, [width, intervals, startingWidth, incrementSize]);\n\n    const fixedWidth = isFixedWidth(normalizedProps.width);\n\n    if (__HYDROGEN_DEV__ && !sizes && !fixedWidth) {\n      console.warn(\n        [\n          'No sizes prop provided to Image component,',\n          'you may be loading unnecessarily large images.',\n          `Image used is ${\n            src || data?.url || passthroughProps?.key || 'unknown'\n          }`,\n        ].join(' '),\n      );\n    }\n\n    /*\n     * We check to see whether the image is fixed width or not,\n     * if fixed, we still provide a srcSet, but only to account for\n     * different pixel densities.\n     */\n    if (fixedWidth) {\n      return (\n        <FixedWidthImage\n          aspectRatio={aspectRatio}\n          crop={crop}\n          decoding={decoding}\n          height={height}\n          imageWidths={imageWidths}\n          loader={loader}\n          loading={loading}\n          normalizedProps={normalizedProps}\n          passthroughProps={passthroughProps}\n          ref={ref}\n          width={width}\n        />\n      );\n    } else {\n      return (\n        <FluidImage\n          aspectRatio={aspectRatio}\n          crop={crop}\n          decoding={decoding}\n          imageWidths={imageWidths}\n          loader={loader}\n          loading={loading}\n          normalizedProps={normalizedProps}\n          passthroughProps={passthroughProps}\n          placeholderWidth={placeholderWidth}\n          ref={ref}\n          sizes={sizes}\n        />\n      );\n    }\n  },\n);\n\ntype FixedImageExludedProps =\n  | 'data'\n  | 'loader'\n  | 'loaderOptions'\n  | 'sizes'\n  | 'srcSetOptions'\n  | 'widths';\n\ntype FixedWidthImageProps = Omit<HydrogenImageProps, FixedImageExludedProps> & {\n  loader: Loader;\n  passthroughProps: React.ImgHTMLAttributes<HTMLImageElement>;\n  normalizedProps: NormalizedProps;\n  imageWidths: number[];\n  ref: React.Ref<HTMLImageElement>;\n};\n\nfunction FixedWidthImage({\n  aspectRatio,\n  crop,\n  decoding,\n  height,\n  imageWidths,\n  loader = shopifyLoader,\n  loading,\n  normalizedProps,\n  passthroughProps,\n  ref,\n  width,\n}: FixedWidthImageProps) {\n  const fixed = React.useMemo(() => {\n    const intWidth: number | undefined = getNormalizedFixedUnit(width);\n    const intHeight: number | undefined = getNormalizedFixedUnit(height);\n\n    /*\n     * The aspect ratio for fixed width images is taken from the explicitly\n     * set prop, but if that's not present, and both width and height are\n     * set, we calculate the aspect ratio from the width and height—as\n     * long as they share the same unit type (e.g. both are 'px').\n     */\n    const fixedAspectRatio = aspectRatio\n      ? aspectRatio\n      : unitsMatch(normalizedProps.width, normalizedProps.height)\n      ? [intWidth, intHeight].join('/')\n      : normalizedProps.aspectRatio\n      ? normalizedProps.aspectRatio\n      : undefined;\n\n    /*\n     * The Sizes Array generates an array of all of the parts\n     * that make up the srcSet, including the width, height, and crop\n     */\n    const sizesArray =\n      imageWidths === undefined\n        ? undefined\n        : generateSizes(imageWidths, fixedAspectRatio, crop);\n\n    const fixedHeight = intHeight\n      ? intHeight\n      : fixedAspectRatio && intWidth\n      ? intWidth * (parseAspectRatio(fixedAspectRatio) ?? 1)\n      : undefined;\n\n    const srcSet = generateSrcSet(normalizedProps.src, sizesArray, loader);\n    const src = loader({\n      src: normalizedProps.src,\n      width: intWidth,\n      height: fixedHeight,\n      crop: normalizedProps.height === 'auto' ? undefined : crop,\n    });\n\n    return {\n      width: intWidth,\n      aspectRatio: fixedAspectRatio,\n      height: fixedHeight,\n      srcSet,\n      src,\n    };\n  }, [aspectRatio, crop, height, imageWidths, loader, normalizedProps, width]);\n\n  return (\n    <img\n      ref={ref}\n      alt={normalizedProps.alt}\n      decoding={decoding}\n      height={fixed.height}\n      loading={loading}\n      src={fixed.src}\n      srcSet={fixed.srcSet}\n      width={fixed.width}\n      style={{\n        aspectRatio: fixed.aspectRatio,\n        ...passthroughProps.style,\n      }}\n      {...passthroughProps}\n    />\n  );\n}\n\ntype FluidImageExcludedProps =\n  | 'data'\n  | 'width'\n  | 'height'\n  | 'loader'\n  | 'loaderOptions'\n  | 'srcSetOptions';\n\ntype FluidImageProps = Omit<HydrogenImageProps, FluidImageExcludedProps> & {\n  imageWidths: number[];\n  loader: Loader;\n  normalizedProps: NormalizedProps;\n  passthroughProps: React.ImgHTMLAttributes<HTMLImageElement>;\n  placeholderWidth: number;\n  ref: React.Ref<HTMLImageElement>;\n};\n\nfunction FluidImage({\n  crop,\n  decoding,\n  imageWidths,\n  loader = shopifyLoader,\n  loading,\n  normalizedProps,\n  passthroughProps,\n  placeholderWidth,\n  ref,\n  sizes,\n}: FluidImageProps) {\n  const fluid = React.useMemo(() => {\n    const sizesArray =\n      imageWidths === undefined\n        ? undefined\n        : generateSizes(imageWidths, normalizedProps.aspectRatio, crop);\n\n    const placeholderHeight =\n      normalizedProps.aspectRatio && placeholderWidth\n        ? placeholderWidth *\n          (parseAspectRatio(normalizedProps.aspectRatio) ?? 1)\n        : undefined;\n\n    const srcSet = generateSrcSet(normalizedProps.src, sizesArray, loader);\n\n    const src = loader({\n      src: normalizedProps.src,\n      width: placeholderWidth,\n      height: placeholderHeight,\n      crop,\n    });\n\n    return {\n      placeholderHeight,\n      srcSet,\n      src,\n    };\n  }, [crop, imageWidths, loader, normalizedProps, placeholderWidth]);\n\n  return (\n    <img\n      ref={ref}\n      alt={normalizedProps.alt}\n      decoding={decoding}\n      height={fluid.placeholderHeight}\n      loading={loading}\n      sizes={sizes}\n      src={fluid.src}\n      srcSet={fluid.srcSet}\n      width={placeholderWidth}\n      {...passthroughProps}\n      style={{\n        width: normalizedProps.width,\n        aspectRatio: normalizedProps.aspectRatio,\n        ...passthroughProps.style,\n      }}\n    />\n  );\n}\n\n/**\n * The shopifyLoader function is a simple utility function that takes a src, width,\n * height, and crop and returns a string that can be used as the src for an image.\n * It can be used with the Hydrogen Image component or with the next/image component.\n * (or any others that accept equivalent configuration)\n * @param src - The source URL of the image, e.g. `https://cdn.shopify.com/static/sample-images/garnished.jpeg`\n * @param width - The width of the image, e.g. `100`\n * @param height - The height of the image, e.g. `100`\n * @param crop - The crop of the image, e.g. `center`\n * @returns A Shopify image URL with the correct query parameters, e.g. `https://cdn.shopify.com/static/sample-images/garnished.jpeg?width=100&height=100&crop=center`\n *\n * @example\n * ```\n * shopifyLoader({\n *   src: 'https://cdn.shopify.com/static/sample-images/garnished.jpeg',\n *   width: 100,\n *   height: 100,\n *   crop: 'center',\n * })\n * ```\n */\nexport function shopifyLoader({src, width, height, crop}: LoaderParams) {\n  if (!src) {\n    return '';\n  }\n\n  const url = new URL(src);\n\n  if (width) {\n    url.searchParams.append('width', Math.round(width).toString());\n  }\n\n  if (height) {\n    url.searchParams.append('height', Math.round(height).toString());\n  }\n\n  if (crop) {\n    url.searchParams.append('crop', crop);\n  }\n  return url.href;\n}\n\n/**\n * Checks whether the width and height share the same unit type\n * @param width - The width of the image, e.g. 100% | 10px\n * @param height - The height of the image, e.g. auto | 100px\n * @returns Whether the width and height share the same unit type (boolean)\n */\nfunction unitsMatch(\n  width: string | number = '100%',\n  height: string | number = 'auto',\n): boolean {\n  return (\n    getUnitValueParts(width.toString()).unit ===\n    getUnitValueParts(height.toString()).unit\n  );\n}\n\n/**\n * Given a CSS size, returns the unit and number parts of the value\n * @param value - The CSS size, e.g. 100px\n * @returns The unit and number parts of the value, e.g. \\{unit: 'px', number: 100\\}\n */\nfunction getUnitValueParts(value: string): {unit: string; number: number} {\n  const unit = value.replace(/[0-9.]/g, '');\n  const number = parseFloat(value.replace(unit, ''));\n\n  return {\n    unit: unit === '' ? (number === undefined ? 'auto' : 'px') : unit,\n    number,\n  };\n}\n\n/**\n * Given a value, returns the width of the image as an integer in pixels\n * @param value - The width of the image, e.g. 16px | 1rem | 1em | 16\n * @returns The width of the image in pixels, e.g. 16, or undefined if the value is not a fixed unit\n */\nfunction getNormalizedFixedUnit(value?: string | number): number | undefined {\n  if (value === undefined) {\n    return;\n  }\n\n  const {unit, number} = getUnitValueParts(value.toString());\n\n  switch (unit) {\n    case 'em':\n      return number * 16;\n    case 'rem':\n      return number * 16;\n    case 'px':\n      return number;\n    case '':\n      return number;\n    default:\n      return;\n  }\n}\n\n/**\n * This function checks whether a width is fixed or not.\n * @param width - The width of the image, e.g. 100 | '100px' | '100em' | '100rem'\n * @returns Whether the width is fixed or not\n */\nfunction isFixedWidth(width: string | number): boolean {\n  const fixedEndings = /\\d(px|em|rem)$/;\n  return (\n    typeof width === 'number' ||\n    (typeof width === 'string' && fixedEndings.test(width))\n  );\n}\n\n/**\n * This function generates a srcSet for Shopify images.\n * @param src - The source URL of the image, e.g. https://cdn.shopify.com/static/sample-images/garnished.jpeg\n * @param sizesArray - An array of objects containing the `width`, `height`, and `crop` of the image, e.g. [\\{width: 200, height: 200, crop: 'center'\\}, \\{width: 400, height: 400, crop: 'center'\\}]\n * @param loader - A function that takes a Shopify image URL and returns a Shopify image URL with the correct query parameters\n * @returns A srcSet for Shopify images, e.g. 'https://cdn.shopify.com/static/sample-images/garnished.jpeg?width=200&height=200&crop=center 200w, https://cdn.shopify.com/static/sample-images/garnished.jpeg?width=400&height=400&crop=center 400w'\n */\nexport function generateSrcSet(\n  src?: string,\n  sizesArray?: Array<{width?: number; height?: number; crop?: Crop}>,\n  loader: Loader = shopifyLoader,\n): string {\n  if (!src) {\n    return '';\n  }\n\n  if (sizesArray?.length === 0 || !sizesArray) {\n    return src;\n  }\n\n  return sizesArray\n    .map(\n      (size, i) =>\n        `${loader({\n          src,\n          width: size.width,\n          height: size.height,\n          crop: size.crop,\n        })} ${sizesArray.length === 3 ? `${i + 1}x` : `${size.width ?? 0}w`}`,\n    )\n    .join(`, `);\n}\n\n/**\n * This function generates an array of sizes for Shopify images, for both fixed and responsive images.\n * @param width - The CSS width of the image\n * @param intervals - The number of intervals to generate\n * @param startingWidth - The starting width of the image\n * @param incrementSize - The size of each interval\n * @returns An array of widths\n */\nexport function generateImageWidths(\n  width: string | number = '100%',\n  intervals: number,\n  startingWidth: number,\n  incrementSize: number,\n): number[] {\n  const responsive = Array.from(\n    {length: intervals},\n    (_, i) => i * incrementSize + startingWidth,\n  );\n\n  const fixed = Array.from(\n    {length: 3},\n    (_, i) => (i + 1) * (getNormalizedFixedUnit(width) ?? 0),\n  );\n\n  return isFixedWidth(width) ? fixed : responsive;\n}\n\n/**\n * Simple utility function to convert an aspect ratio CSS string to a decimal, currently only supports values like `1/1`, not `0.5`, or `auto`\n * @param aspectRatio - The aspect ratio of the image, e.g. `1/1`\n * @returns The aspect ratio as a number, e.g. `0.5`\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio}\n */\nexport function parseAspectRatio(aspectRatio?: string): number | undefined {\n  if (!aspectRatio) return;\n  const [width, height] = aspectRatio.split('/');\n  return 1 / (Number(width) / Number(height));\n}\n\n// Generate data needed for Imagery loader\nexport function generateSizes(\n  imageWidths?: number[],\n  aspectRatio?: string,\n  crop: Crop = 'center',\n):\n  | {\n      width: number;\n      height: number | undefined;\n      crop: Crop;\n    }[]\n  | undefined {\n  if (!imageWidths) return;\n  const sizes = imageWidths.map((width: number) => {\n    return {\n      width,\n      height: aspectRatio\n        ? width * (parseAspectRatio(aspectRatio) ?? 1)\n        : undefined,\n      crop,\n    };\n  });\n  return sizes;\n  /*\n    Given:\n      ([100, 200], 1/1, 'center')\n    Returns:\n      [{width: 100, height: 100, crop: 'center'},\n      {width: 200, height: 200, crop: 'center'}]\n  */\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}