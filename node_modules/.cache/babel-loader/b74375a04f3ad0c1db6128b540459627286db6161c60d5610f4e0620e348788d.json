{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { useShop, defaultShopifyContext } from \"./ShopifyProvider.mjs\";\nimport { useLoadScript } from \"./load-script.mjs\";\nimport { parseGid } from \"./analytics-utils.mjs\";\nconst SHOPJS_URL = \"https://cdn.shopify.com/shopifycloud/shop-js/v1.0/client.js\";\nfunction ShopPayButton(_ref) {\n  let {\n    variantIds,\n    className,\n    variantIdsAndQuantities,\n    width,\n    storeDomain: _storeDomain\n  } = _ref;\n  const shop = useShop();\n  const storeDomain = _storeDomain || (shop == null ? void 0 : shop.storeDomain);\n  const shopPayLoadedStatus = useLoadScript(SHOPJS_URL);\n  let ids = [];\n  if (!storeDomain || storeDomain === defaultShopifyContext.storeDomain) {\n    throw new Error(MissingStoreDomainErrorMessage);\n  }\n  if (variantIds && variantIdsAndQuantities) {\n    throw new Error(DoublePropsErrorMessage);\n  }\n  if (!variantIds && !variantIdsAndQuantities) {\n    throw new Error(MissingPropsErrorMessage);\n  }\n  if (variantIds) {\n    ids = variantIds.reduce((prev, curr) => {\n      const bareId = parseGid(curr).id;\n      if (bareId) {\n        prev.push(bareId);\n      }\n      return prev;\n    }, []);\n  } else if (variantIdsAndQuantities) {\n    ids = variantIdsAndQuantities.reduce((prev, curr) => {\n      const bareId = parseGid(curr == null ? void 0 : curr.id).id;\n      if (bareId) {\n        prev.push(`${bareId}:${(curr == null ? void 0 : curr.quantity) ?? 1}`);\n      }\n      return prev;\n    }, []);\n  } else {\n    throw new Error(MissingPropsErrorMessage);\n  }\n  if (ids.length === 0) {\n    throw new Error(InvalidPropsErrorMessage);\n  }\n  const style = width ? {\n    \"--shop-pay-button-width\": width\n  } : void 0;\n  return /* @__PURE__ */jsx(\"div\", {\n    className,\n    style,\n    children: shopPayLoadedStatus === \"done\" && /* @__PURE__ */jsx(\"shop-pay-button\", {\n      \"store-url\": storeDomain,\n      variants: ids.join(\",\")\n    })\n  });\n}\nconst MissingStoreDomainErrorMessage = 'You must pass a \"storeDomain\" prop to the \"ShopPayButton\" component, or wrap it in a \"ShopifyProvider\" component.';\nconst InvalidPropsErrorMessage = `You must pass in \"variantIds\" in the form of [\"gid://shopify/ProductVariant/1\"]`;\nconst MissingPropsErrorMessage = `You must pass in either \"variantIds\" or \"variantIdsAndQuantities\" to ShopPayButton`;\nconst DoublePropsErrorMessage = `You must provide either a variantIds or variantIdsAndQuantities prop, but not both in the ShopPayButton component`;\nexport { DoublePropsErrorMessage, InvalidPropsErrorMessage, MissingPropsErrorMessage, MissingStoreDomainErrorMessage, ShopPayButton };","map":{"version":3,"names":["SHOPJS_URL","ShopPayButton","_ref","variantIds","className","variantIdsAndQuantities","width","storeDomain","_storeDomain","shop","useShop","shopPayLoadedStatus","useLoadScript","ids","defaultShopifyContext","Error","MissingStoreDomainErrorMessage","DoublePropsErrorMessage","MissingPropsErrorMessage","reduce","prev","curr","bareId","parseGid","id","push","quantity","length","InvalidPropsErrorMessage","style","jsx","children","variants","join"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/ShopPayButton.tsx"],"sourcesContent":["import {defaultShopifyContext, useShop} from './ShopifyProvider.js';\nimport {useLoadScript} from './load-script.js';\nimport {parseGid} from './analytics-utils.js';\n\n// By using 'never' in the \"or\" cases below, it makes these props \"exclusive\" and means that you cannot pass both of them; you must pass either one OR the other.\ntype ShopPayButtonProps = ShopPayButtonStyleProps &\n  ShopPayDomainProps &\n  (ShopPayVariantIds | ShopPayVariantAndQuantities);\n\ntype ShopPayButtonStyleProps = {\n  /** A string of classes to apply to the `div` that wraps the Shop Pay button. */\n  className?: string;\n  /** A string that's applied to the [CSS custom property (variable)](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) `--shop-pay-button-width` for the [Buy with Shop Pay component](https://shopify.dev/custom-storefronts/tools/web-components#buy-with-shop-pay-component). */\n  width?: string;\n};\n\ntype ShopPayDomainProps = {\n  /** The domain of your Shopify storefront URL (eg: `your-store.myshopify.com`). */\n  storeDomain?: string;\n};\n\ntype ShopPayVariantIds = {\n  /** An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`. */\n  variantIds: string[];\n  /** An array of variant IDs and quantities to purchase with Shop Pay. */\n  variantIdsAndQuantities?: never;\n};\n\ntype ShopPayVariantAndQuantities = {\n  /** An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`. */\n  variantIds?: never;\n  /** An array of variant IDs and quantities to purchase with Shop Pay. */\n  variantIdsAndQuantities: Array<{\n    id: string;\n    quantity: number;\n  }>;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      'shop-pay-button': {\n        variants: string;\n        'store-url': string;\n      };\n    }\n  }\n}\n\nconst SHOPJS_URL =\n  'https://cdn.shopify.com/shopifycloud/shop-js/v1.0/client.js';\n\n/**\n * The `ShopPayButton` component renders a button that redirects to the Shop Pay checkout.\n * It renders a [`<shop-pay-button>`](https://shopify.dev/custom-storefronts/tools/web-components) custom element, for which it will lazy-load the source code automatically.\n * It relies on the `<ShopProvider>` context provider.\n */\nexport function ShopPayButton({\n  variantIds,\n  className,\n  variantIdsAndQuantities,\n  width,\n  storeDomain: _storeDomain,\n}: ShopPayButtonProps): JSX.Element {\n  const shop = useShop();\n  const storeDomain = _storeDomain || shop?.storeDomain;\n  const shopPayLoadedStatus = useLoadScript(SHOPJS_URL);\n\n  let ids: string[] = [];\n\n  if (!storeDomain || storeDomain === defaultShopifyContext.storeDomain) {\n    throw new Error(MissingStoreDomainErrorMessage);\n  }\n\n  if (variantIds && variantIdsAndQuantities) {\n    throw new Error(DoublePropsErrorMessage);\n  }\n\n  if (!variantIds && !variantIdsAndQuantities) {\n    throw new Error(MissingPropsErrorMessage);\n  }\n\n  if (variantIds) {\n    ids = variantIds.reduce<string[]>((prev, curr) => {\n      const bareId = parseGid(curr).id;\n      if (bareId) {\n        prev.push(bareId);\n      }\n      return prev;\n    }, []);\n  } else if (variantIdsAndQuantities) {\n    ids = variantIdsAndQuantities.reduce<string[]>((prev, curr) => {\n      const bareId = parseGid(curr?.id).id;\n      if (bareId) {\n        prev.push(`${bareId}:${curr?.quantity ?? 1}`);\n      }\n      return prev;\n    }, []);\n  } else {\n    throw new Error(MissingPropsErrorMessage);\n  }\n\n  if (ids.length === 0) {\n    throw new Error(InvalidPropsErrorMessage);\n  }\n\n  const style = width\n    ? ({\n        '--shop-pay-button-width': width,\n      } as React.CSSProperties)\n    : undefined;\n\n  return (\n    <div className={className} style={style}>\n      {shopPayLoadedStatus === 'done' && (\n        <shop-pay-button store-url={storeDomain} variants={ids.join(',')} />\n      )}\n    </div>\n  );\n}\n\nexport const MissingStoreDomainErrorMessage =\n  'You must pass a \"storeDomain\" prop to the \"ShopPayButton\" component, or wrap it in a \"ShopifyProvider\" component.';\nexport const InvalidPropsErrorMessage = `You must pass in \"variantIds\" in the form of [\"gid://shopify/ProductVariant/1\"]`;\nexport const MissingPropsErrorMessage = `You must pass in either \"variantIds\" or \"variantIdsAndQuantities\" to ShopPayButton`;\nexport const DoublePropsErrorMessage = `You must provide either a variantIds or variantIdsAndQuantities prop, but not both in the ShopPayButton component`;\n"],"mappings":";;;;AAkDA,MAAMA,UAAA,GACJ;AAOK,SAASC,cAAAC,IAAA,EAMoB;EAAA,IANN;IAC5BC,UAAA;IACAC,SAAA;IACAC,uBAAA;IACAC,KAAA;IACAC,WAAA,EAAaC;EACf,IAAAN,IAAA;EACE,MAAMO,IAAA,GAAOC,OAAA;EACP,MAAAH,WAAA,GAAcC,YAAA,KAAgBC,IAAA,oBAAAA,IAAA,CAAMF,WAAA;EACpC,MAAAI,mBAAA,GAAsBC,aAAA,CAAcZ,UAAU;EAEpD,IAAIa,GAAA,GAAgB;EAEpB,IAAI,CAACN,WAAA,IAAeA,WAAA,KAAgBO,qBAAA,CAAsBP,WAAA,EAAa;IAC/D,UAAIQ,KAAA,CAAMC,8BAA8B;EAChD;EAEA,IAAIb,UAAA,IAAcE,uBAAA,EAAyB;IACnC,UAAIU,KAAA,CAAME,uBAAuB;EACzC;EAEI,KAACd,UAAA,IAAc,CAACE,uBAAA,EAAyB;IACrC,UAAIU,KAAA,CAAMG,wBAAwB;EAC1C;EAEA,IAAIf,UAAA,EAAY;IACdU,GAAA,GAAMV,UAAA,CAAWgB,MAAA,CAAiB,CAACC,IAAA,EAAMC,IAAA,KAAS;MAC1C,MAAAC,MAAA,GAASC,QAAA,CAASF,IAAI,EAAEG,EAAA;MAC9B,IAAIF,MAAA,EAAQ;QACVF,IAAA,CAAKK,IAAA,CAAKH,MAAM;MAClB;MACO,OAAAF,IAAA;IACT,GAAG,EAAE;EAAA,WACIf,uBAAA,EAAyB;IAClCQ,GAAA,GAAMR,uBAAA,CAAwBc,MAAA,CAAiB,CAACC,IAAA,EAAMC,IAAA,KAAS;MAC7D,MAAMC,MAAA,GAASC,QAAA,CAASF,IAAA,oBAAAA,IAAA,CAAMG,EAAE,EAAEA,EAAA;MAClC,IAAIF,MAAA,EAAQ;QACVF,IAAA,CAAKK,IAAA,CAAK,GAAGH,MAAA,KAAUD,IAAA,oBAAAA,IAAA,CAAMK,QAAA,KAAY,GAAG;MAC9C;MACO,OAAAN,IAAA;IACT,GAAG,EAAE;EAAA,OACA;IACC,UAAIL,KAAA,CAAMG,wBAAwB;EAC1C;EAEI,IAAAL,GAAA,CAAIc,MAAA,KAAW,GAAG;IACd,UAAIZ,KAAA,CAAMa,wBAAwB;EAC1C;EAEA,MAAMC,KAAA,GAAQvB,KAAA,GACT;IACC,2BAA2BA;EAE7B;EAEJ,OACG,eAAAwB,GAAA;IAAI1B,SAAA;IAAsByB,KAAA;IACxBE,QAAA,EAAApB,mBAAA,KAAwB,UACvB,eAAAmB,GAAA,CAAC,mBAAgB;MAAA,aAAWvB,WAAA;MAAayB,QAAA,EAAUnB,GAAA,CAAIoB,IAAA,CAAK,GAAG;IAAA,CAAG;EAEtE;AAEJ;AAEO,MAAMjB,8BAAA,GACX;AACK,MAAMY,wBAAA,GAA2B;AACjC,MAAMV,wBAAA,GAA2B;AACjC,MAAMD,uBAAA,GAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}