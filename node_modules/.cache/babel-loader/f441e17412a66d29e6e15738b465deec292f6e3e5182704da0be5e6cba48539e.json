{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport { CartQuery, CartCreate, CartLineAdd, CartLineUpdate, CartLineRemove, CartNoteUpdate, CartBuyerIdentityUpdate, CartAttributesUpdate, CartDiscountCodesUpdate } from \"./cart-queries.mjs\";\nimport { useCartFetch } from \"./cart-hooks.mjs\";\nfunction useCartActions(_ref) {\n  let {\n    numCartLines,\n    cartFragment,\n    countryCode = \"US\"\n  } = _ref;\n  const fetchCart = useCartFetch();\n  const cartFetch = useCallback(cartId => {\n    return fetchCart({\n      query: CartQuery(cartFragment),\n      variables: {\n        id: cartId,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [fetchCart, cartFragment, numCartLines, countryCode]);\n  const cartCreate = useCallback(cart => {\n    return fetchCart({\n      query: CartCreate(cartFragment),\n      variables: {\n        input: cart,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  const cartLineAdd = useCallback((cartId, lines) => {\n    return fetchCart({\n      query: CartLineAdd(cartFragment),\n      variables: {\n        cartId,\n        lines,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  const cartLineUpdate = useCallback((cartId, lines) => {\n    return fetchCart({\n      query: CartLineUpdate(cartFragment),\n      variables: {\n        cartId,\n        lines,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  const cartLineRemove = useCallback((cartId, lines) => {\n    return fetchCart({\n      query: CartLineRemove(cartFragment),\n      variables: {\n        cartId,\n        lines,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  const noteUpdate = useCallback((cartId, note) => {\n    return fetchCart({\n      query: CartNoteUpdate(cartFragment),\n      variables: {\n        cartId,\n        note,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [fetchCart, cartFragment, numCartLines, countryCode]);\n  const buyerIdentityUpdate = useCallback((cartId, buyerIdentity) => {\n    return fetchCart({\n      query: CartBuyerIdentityUpdate(cartFragment),\n      variables: {\n        cartId,\n        buyerIdentity,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  const cartAttributesUpdate = useCallback((cartId, attributes) => {\n    return fetchCart({\n      query: CartAttributesUpdate(cartFragment),\n      variables: {\n        cartId,\n        attributes,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  const discountCodesUpdate = useCallback((cartId, discountCodes) => {\n    return fetchCart({\n      query: CartDiscountCodesUpdate(cartFragment),\n      variables: {\n        cartId,\n        discountCodes,\n        numCartLines,\n        country: countryCode\n      }\n    });\n  }, [cartFragment, countryCode, fetchCart, numCartLines]);\n  return useMemo(() => ({\n    cartFetch,\n    cartCreate,\n    cartLineAdd,\n    cartLineUpdate,\n    cartLineRemove,\n    noteUpdate,\n    buyerIdentityUpdate,\n    cartAttributesUpdate,\n    discountCodesUpdate,\n    cartFragment\n  }), [cartFetch, cartCreate, cartLineAdd, cartLineUpdate, cartLineRemove, noteUpdate, buyerIdentityUpdate, cartAttributesUpdate, discountCodesUpdate, cartFragment]);\n}\nexport { useCartActions };","map":{"version":3,"names":["useCartActions","_ref","numCartLines","cartFragment","countryCode","fetchCart","useCartFetch","cartFetch","useCallback","cartId","query","CartQuery","variables","id","country","cartCreate","cart","CartCreate","input","cartLineAdd","lines","CartLineAdd","cartLineUpdate","CartLineUpdate","cartLineRemove","CartLineRemove","noteUpdate","note","CartNoteUpdate","buyerIdentityUpdate","buyerIdentity","CartBuyerIdentityUpdate","cartAttributesUpdate","attributes","CartAttributesUpdate","discountCodesUpdate","discountCodes","CartDiscountCodesUpdate","useMemo"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/useCartActions.tsx"],"sourcesContent":["import {useCallback, useMemo} from 'react';\nimport {\n  AttributeInput,\n  CartBuyerIdentityInput,\n  CartInput,\n  CartLineInput,\n  CartLineUpdateInput,\n  CountryCode,\n  Cart as CartType,\n  MutationCartDiscountCodesUpdateArgs,\n  MutationCartNoteUpdateArgs,\n} from './storefront-api-types.js';\nimport {\n  CartAttributesUpdate,\n  CartBuyerIdentityUpdate,\n  CartCreate,\n  CartDiscountCodesUpdate,\n  CartLineAdd,\n  CartLineRemove,\n  CartLineUpdate,\n  CartNoteUpdate,\n  CartQuery,\n} from './cart-queries.js';\nimport {useCartFetch} from './cart-hooks.js';\nimport {PartialDeep} from 'type-fest';\n\ntype CartResponse = PartialDeep<CartType, {recurseIntoArrays: true}>;\n\n/**\n * The `useCartActions` hook returns helper graphql functions for Storefront Cart API\n *\n * See [cart API graphql mutations](https://shopify.dev/api/storefront/2023-04/objects/Cart)\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useCartActions({\n  numCartLines,\n  cartFragment,\n  countryCode = 'US',\n}: {\n  /**  Maximum number of cart lines to fetch. Defaults to 250 cart lines. */\n  numCartLines?: number;\n  /** A fragment used to query the Storefront API's [Cart object](https://shopify.dev/api/storefront/2023-04/objects/cart) for all queries and mutations. A default value is used if no argument is provided. */\n  cartFragment: string;\n  /** The ISO country code for i18n. */\n  countryCode?: CountryCode;\n}) {\n  const fetchCart = useCartFetch();\n\n  const cartFetch = useCallback(\n    (cartId: string) => {\n      return fetchCart<{cart: CartResponse}>({\n        query: CartQuery(cartFragment),\n        variables: {\n          id: cartId,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [fetchCart, cartFragment, numCartLines, countryCode],\n  );\n\n  const cartCreate = useCallback(\n    (cart: CartInput) => {\n      return fetchCart<{cartCreate: {cart: CartResponse}}>({\n        query: CartCreate(cartFragment),\n        variables: {\n          input: cart,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  const cartLineAdd = useCallback(\n    (cartId: string, lines: CartLineInput[]) => {\n      return fetchCart<{cartLinesAdd: {cart: CartResponse}}>({\n        query: CartLineAdd(cartFragment),\n        variables: {\n          cartId,\n          lines,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  const cartLineUpdate = useCallback(\n    (cartId: string, lines: CartLineUpdateInput[]) => {\n      return fetchCart<{cartLinesUpdate: {cart: CartResponse}}>({\n        query: CartLineUpdate(cartFragment),\n        variables: {\n          cartId,\n          lines,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  const cartLineRemove = useCallback(\n    (cartId: string, lines: string[]) => {\n      return fetchCart<{cartLinesRemove: {cart: CartResponse}}>({\n        query: CartLineRemove(cartFragment),\n        variables: {\n          cartId,\n          lines,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  const noteUpdate = useCallback(\n    (cartId: string, note: MutationCartNoteUpdateArgs['note']) => {\n      return fetchCart<{cartNoteUpdate: {cart: CartResponse}}>({\n        query: CartNoteUpdate(cartFragment),\n        variables: {\n          cartId,\n          note,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [fetchCart, cartFragment, numCartLines, countryCode],\n  );\n\n  const buyerIdentityUpdate = useCallback(\n    (cartId: string, buyerIdentity: CartBuyerIdentityInput) => {\n      return fetchCart<{cartBuyerIdentityUpdate: {cart: CartResponse}}>({\n        query: CartBuyerIdentityUpdate(cartFragment),\n        variables: {\n          cartId,\n          buyerIdentity,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  const cartAttributesUpdate = useCallback(\n    (cartId: string, attributes: AttributeInput[]) => {\n      return fetchCart<{cartAttributesUpdate: {cart: CartResponse}}>({\n        query: CartAttributesUpdate(cartFragment),\n        variables: {\n          cartId,\n          attributes,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  const discountCodesUpdate = useCallback(\n    (\n      cartId: string,\n      discountCodes: MutationCartDiscountCodesUpdateArgs['discountCodes'],\n    ) => {\n      return fetchCart<{cartDiscountCodesUpdate: {cart: CartResponse}}>({\n        query: CartDiscountCodesUpdate(cartFragment),\n        variables: {\n          cartId,\n          discountCodes,\n          numCartLines,\n          country: countryCode,\n        },\n      });\n    },\n    [cartFragment, countryCode, fetchCart, numCartLines],\n  );\n\n  return useMemo(\n    () => ({\n      cartFetch,\n      cartCreate,\n      cartLineAdd,\n      cartLineUpdate,\n      cartLineRemove,\n      noteUpdate,\n      buyerIdentityUpdate,\n      cartAttributesUpdate,\n      discountCodesUpdate,\n      cartFragment,\n    }),\n    [\n      cartFetch,\n      cartCreate,\n      cartLineAdd,\n      cartLineUpdate,\n      cartLineRemove,\n      noteUpdate,\n      buyerIdentityUpdate,\n      cartAttributesUpdate,\n      discountCodesUpdate,\n      cartFragment,\n    ],\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}