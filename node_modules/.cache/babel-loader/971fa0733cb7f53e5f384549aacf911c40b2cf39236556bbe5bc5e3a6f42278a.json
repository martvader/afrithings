{"ast":null,"code":"import { useMemo } from \"react\";\nimport { useShop } from \"./ShopifyProvider.mjs\";\nfunction useMoney(money) {\n  const {\n    countryIsoCode,\n    languageIsoCode\n  } = useShop();\n  const locale = `${languageIsoCode}-${countryIsoCode}`;\n  if (!locale) {\n    throw new Error(`useMoney(): Unable to get 'locale' from 'useShop()', which means that 'locale' was not passed to '<ShopifyProvider/>'. 'locale' is required for 'useMoney()' to work`);\n  }\n  const amount = parseFloat(money.amount);\n  const options = useMemo(() => ({\n    style: \"currency\",\n    currency: money.currencyCode\n  }), [money.currencyCode]);\n  const defaultFormatter = useLazyFormatter(locale, options);\n  const nameFormatter = useLazyFormatter(locale, {\n    ...options,\n    currencyDisplay: \"name\"\n  });\n  const narrowSymbolFormatter = useLazyFormatter(locale, {\n    ...options,\n    currencyDisplay: \"narrowSymbol\"\n  });\n  const withoutTrailingZerosFormatter = useLazyFormatter(locale, {\n    ...options,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  });\n  const withoutCurrencyFormatter = useLazyFormatter(locale);\n  const withoutTrailingZerosOrCurrencyFormatter = useLazyFormatter(locale, {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  });\n  const isPartCurrency = part => part.type === \"currency\";\n  const lazyFormatters = useMemo(() => ({\n    original: () => money,\n    currencyCode: () => money.currencyCode,\n    localizedString: () => defaultFormatter().format(amount),\n    parts: () => defaultFormatter().formatToParts(amount),\n    withoutTrailingZeros: () => amount % 1 === 0 ? withoutTrailingZerosFormatter().format(amount) : defaultFormatter().format(amount),\n    withoutTrailingZerosAndCurrency: () => amount % 1 === 0 ? withoutTrailingZerosOrCurrencyFormatter().format(amount) : withoutCurrencyFormatter().format(amount),\n    currencyName: () => {\n      var _a;\n      return ((_a = nameFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a.value) ?? money.currencyCode;\n    },\n    // e.g. \"US dollars\"\n    currencySymbol: () => {\n      var _a;\n      return ((_a = defaultFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a.value) ?? money.currencyCode;\n    },\n    // e.g. \"USD\"\n    currencyNarrowSymbol: () => {\n      var _a;\n      return ((_a = narrowSymbolFormatter().formatToParts(amount).find(isPartCurrency)) == null ? void 0 : _a.value) ?? \"\";\n    },\n    // e.g. \"$\"\n    amount: () => defaultFormatter().formatToParts(amount).filter(part => [\"decimal\", \"fraction\", \"group\", \"integer\", \"literal\"].includes(part.type)).map(part => part.value).join(\"\")\n  }), [money, amount, nameFormatter, defaultFormatter, narrowSymbolFormatter, withoutCurrencyFormatter, withoutTrailingZerosFormatter, withoutTrailingZerosOrCurrencyFormatter]);\n  return useMemo(() => new Proxy(lazyFormatters, {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    get: (target, key) => {\n      var _a;\n      return (_a = Reflect.get(target, key)) == null ? void 0 : _a.call(null);\n    }\n  }), [lazyFormatters]);\n}\nfunction useLazyFormatter(locale, options) {\n  return useMemo(() => {\n    let memoized;\n    return () => memoized ?? (memoized = new Intl.NumberFormat(locale, options));\n  }, [locale, options]);\n}\nexport { useMoney };","map":{"version":3,"names":["useMoney","money","countryIsoCode","languageIsoCode","useShop","locale","Error","amount","parseFloat","options","useMemo","style","currency","currencyCode","defaultFormatter","useLazyFormatter","nameFormatter","currencyDisplay","narrowSymbolFormatter","withoutTrailingZerosFormatter","minimumFractionDigits","maximumFractionDigits","withoutCurrencyFormatter","withoutTrailingZerosOrCurrencyFormatter","isPartCurrency","part","type","lazyFormatters","original","localizedString","format","parts","formatToParts","withoutTrailingZeros","withoutTrailingZerosAndCurrency","currencyName","_a","find","value","currencySymbol","currencyNarrowSymbol","filter","includes","map","join","Proxy","get","target","key","Reflect","call","memoized","Intl","NumberFormat"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/useMoney.tsx"],"sourcesContent":["import {useMemo} from 'react';\nimport {useShop} from './ShopifyProvider.js';\nimport {CurrencyCode, MoneyV2} from './storefront-api-types.js';\n\nexport type UseMoneyValue = {\n  /**\n   * The currency code from the `MoneyV2` object.\n   */\n  currencyCode: CurrencyCode;\n  /**\n   * The name for the currency code, returned by `Intl.NumberFormat`.\n   */\n  currencyName?: string;\n  /**\n   * The currency symbol returned by `Intl.NumberFormat`.\n   */\n  currencySymbol?: string;\n  /**\n   * The currency narrow symbol returned by `Intl.NumberFormat`.\n   */\n  currencyNarrowSymbol?: string;\n  /**\n   * The localized amount, without any currency symbols or non-number types from the `Intl.NumberFormat.formatToParts` parts.\n   */\n  amount: string;\n  /**\n   * All parts returned by `Intl.NumberFormat.formatToParts`.\n   */\n  parts: Intl.NumberFormatPart[];\n  /**\n   * A string returned by `new Intl.NumberFormat` for the amount and currency code,\n   * using the `locale` value in the [`LocalizationProvider` component](https://shopify.dev/api/hydrogen/components/localization/localizationprovider).\n   */\n  localizedString: string;\n  /**\n   * The `MoneyV2` object provided as an argument to the hook.\n   */\n  original: MoneyV2;\n  /**\n   * A string with trailing zeros removed from the fractional part, if any exist. If there are no trailing zeros, then the fractional part remains.\n   * For example, `$640.00` turns into `$640`.\n   * `$640.42` remains `$640.42`.\n   */\n  withoutTrailingZeros: string;\n  /**\n   * A string without currency and without trailing zeros removed from the fractional part, if any exist. If there are no trailing zeros, then the fractional part remains.\n   * For example, `$640.00` turns into `640`.\n   * `$640.42` turns into `640.42`.\n   */\n  withoutTrailingZerosAndCurrency: string;\n};\n\n/**\n * The `useMoney` hook takes a [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2) and returns a\n * default-formatted string of the amount with the correct currency indicator, along with some of the parts provided by\n * [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat).\n * Uses `locale` from `ShopifyProvider`\n */\nexport function useMoney(money: MoneyV2): UseMoneyValue {\n  const {countryIsoCode, languageIsoCode} = useShop();\n  const locale = `${languageIsoCode}-${countryIsoCode}`;\n\n  if (!locale) {\n    throw new Error(\n      `useMoney(): Unable to get 'locale' from 'useShop()', which means that 'locale' was not passed to '<ShopifyProvider/>'. 'locale' is required for 'useMoney()' to work`,\n    );\n  }\n\n  const amount = parseFloat(money.amount);\n\n  const options = useMemo(\n    () => ({\n      style: 'currency',\n      currency: money.currencyCode,\n    }),\n    [money.currencyCode],\n  );\n\n  const defaultFormatter = useLazyFormatter(locale, options);\n\n  const nameFormatter = useLazyFormatter(locale, {\n    ...options,\n    currencyDisplay: 'name',\n  });\n\n  const narrowSymbolFormatter = useLazyFormatter(locale, {\n    ...options,\n    currencyDisplay: 'narrowSymbol',\n  });\n\n  const withoutTrailingZerosFormatter = useLazyFormatter(locale, {\n    ...options,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  const withoutCurrencyFormatter = useLazyFormatter(locale);\n\n  const withoutTrailingZerosOrCurrencyFormatter = useLazyFormatter(locale, {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  const isPartCurrency = (part: Intl.NumberFormatPart): boolean =>\n    part.type === 'currency';\n\n  // By wrapping these properties in functions, we only\n  // create formatters if they are going to be used.\n  const lazyFormatters = useMemo(\n    () => ({\n      original: () => money,\n      currencyCode: () => money.currencyCode,\n\n      localizedString: () => defaultFormatter().format(amount),\n\n      parts: () => defaultFormatter().formatToParts(amount),\n\n      withoutTrailingZeros: () =>\n        amount % 1 === 0\n          ? withoutTrailingZerosFormatter().format(amount)\n          : defaultFormatter().format(amount),\n\n      withoutTrailingZerosAndCurrency: () =>\n        amount % 1 === 0\n          ? withoutTrailingZerosOrCurrencyFormatter().format(amount)\n          : withoutCurrencyFormatter().format(amount),\n\n      currencyName: () =>\n        nameFormatter().formatToParts(amount).find(isPartCurrency)?.value ??\n        money.currencyCode, // e.g. \"US dollars\"\n\n      currencySymbol: () =>\n        defaultFormatter().formatToParts(amount).find(isPartCurrency)?.value ??\n        money.currencyCode, // e.g. \"USD\"\n\n      currencyNarrowSymbol: () =>\n        narrowSymbolFormatter().formatToParts(amount).find(isPartCurrency)\n          ?.value ?? '', // e.g. \"$\"\n\n      amount: () =>\n        defaultFormatter()\n          .formatToParts(amount)\n          .filter((part) =>\n            ['decimal', 'fraction', 'group', 'integer', 'literal'].includes(\n              part.type,\n            ),\n          )\n          .map((part) => part.value)\n          .join(''),\n    }),\n    [\n      money,\n      amount,\n      nameFormatter,\n      defaultFormatter,\n      narrowSymbolFormatter,\n      withoutCurrencyFormatter,\n      withoutTrailingZerosFormatter,\n      withoutTrailingZerosOrCurrencyFormatter,\n    ],\n  );\n\n  // Call functions automatically when the properties are accessed\n  // to keep these functions as an implementation detail.\n  return useMemo(\n    () =>\n      new Proxy(lazyFormatters as unknown as UseMoneyValue, {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        get: (target, key) => Reflect.get(target, key)?.call(null),\n      }),\n    [lazyFormatters],\n  );\n}\n\nfunction useLazyFormatter(\n  locale: string,\n  options?: Intl.NumberFormatOptions,\n): () => Intl.NumberFormat {\n  return useMemo(() => {\n    let memoized: Intl.NumberFormat;\n    return () => (memoized ??= new Intl.NumberFormat(locale, options));\n  }, [locale, options]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}