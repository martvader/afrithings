{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useState, useRef, useEffect, useCallback, useMemo, useTransition } from \"react\";\nimport { useCartAPIStateMachine } from \"./useCartAPIStateMachine.mjs\";\nimport { CART_ID_STORAGE_KEY } from \"./cart-constants.mjs\";\nimport { defaultCartFragment } from \"./cart-queries.mjs\";\nconst CartContext = createContext(null);\nfunction useCart() {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"Expected a Cart Context, but no Cart Context was found\");\n  }\n  return context;\n}\nfunction CartProvider(_ref) {\n  let {\n    children,\n    numCartLines,\n    onCreate,\n    onLineAdd,\n    onLineRemove,\n    onLineUpdate,\n    onNoteUpdate,\n    onBuyerIdentityUpdate,\n    onAttributesUpdate,\n    onDiscountCodesUpdate,\n    onCreateComplete,\n    onLineAddComplete,\n    onLineRemoveComplete,\n    onLineUpdateComplete,\n    onNoteUpdateComplete,\n    onBuyerIdentityUpdateComplete,\n    onAttributesUpdateComplete,\n    onDiscountCodesUpdateComplete,\n    data: cart,\n    cartFragment = defaultCartFragment,\n    customerAccessToken,\n    countryCode = \"US\"\n  } = _ref;\n  var _a, _b, _c, _d, _e, _f, _g;\n  if (countryCode) countryCode = countryCode.toUpperCase();\n  const [prevCountryCode, setPrevCountryCode] = useState(countryCode);\n  const [prevCustomerAccessToken, setPrevCustomerAccessToken] = useState(customerAccessToken);\n  const customerOverridesCountryCode = useRef(false);\n  if (prevCountryCode !== countryCode || prevCustomerAccessToken !== customerAccessToken) {\n    setPrevCountryCode(countryCode);\n    setPrevCustomerAccessToken(customerAccessToken);\n    customerOverridesCountryCode.current = false;\n  }\n  const [cartState, cartSend] = useCartAPIStateMachine({\n    numCartLines,\n    data: cart,\n    cartFragment,\n    countryCode,\n    onCartActionEntry(_, event) {\n      try {\n        switch (event.type) {\n          case \"CART_CREATE\":\n            return onCreate == null ? void 0 : onCreate();\n          case \"CARTLINE_ADD\":\n            return onLineAdd == null ? void 0 : onLineAdd();\n          case \"CARTLINE_REMOVE\":\n            return onLineRemove == null ? void 0 : onLineRemove();\n          case \"CARTLINE_UPDATE\":\n            return onLineUpdate == null ? void 0 : onLineUpdate();\n          case \"NOTE_UPDATE\":\n            return onNoteUpdate == null ? void 0 : onNoteUpdate();\n          case \"BUYER_IDENTITY_UPDATE\":\n            return onBuyerIdentityUpdate == null ? void 0 : onBuyerIdentityUpdate();\n          case \"CART_ATTRIBUTES_UPDATE\":\n            return onAttributesUpdate == null ? void 0 : onAttributesUpdate();\n          case \"DISCOUNT_CODES_UPDATE\":\n            return onDiscountCodesUpdate == null ? void 0 : onDiscountCodesUpdate();\n        }\n      } catch (error) {\n        console.error(\"Cart entry action failed\", error);\n      }\n    },\n    onCartActionOptimisticUI(context, event) {\n      var _a2, _b2, _c2, _d2;\n      if (!context.cart) return {\n        ...context\n      };\n      switch (event.type) {\n        case \"CARTLINE_REMOVE\":\n          return {\n            ...context,\n            cart: {\n              ...context.cart,\n              lines: (_b2 = (_a2 = context == null ? void 0 : context.cart) == null ? void 0 : _a2.lines) == null ? void 0 : _b2.filter(line => (line == null ? void 0 : line.id) && !event.payload.lines.includes(line == null ? void 0 : line.id))\n            }\n          };\n        case \"CARTLINE_UPDATE\":\n          return {\n            ...context,\n            cart: {\n              ...context.cart,\n              lines: (_d2 = (_c2 = context == null ? void 0 : context.cart) == null ? void 0 : _c2.lines) == null ? void 0 : _d2.map(line => {\n                const updatedLine = event.payload.lines.find(_ref2 => {\n                  let {\n                    id\n                  } = _ref2;\n                  return id === (line == null ? void 0 : line.id);\n                });\n                if (updatedLine && updatedLine.quantity) {\n                  return {\n                    ...line,\n                    quantity: updatedLine.quantity\n                  };\n                }\n                return line;\n              })\n            }\n          };\n      }\n      return {\n        ...context\n      };\n    },\n    onCartActionComplete(context, event) {\n      const cartActionEvent = event.payload.cartActionEvent;\n      try {\n        switch (event.type) {\n          case \"RESOLVE\":\n            switch (cartActionEvent.type) {\n              case \"CART_CREATE\":\n                return onCreateComplete == null ? void 0 : onCreateComplete();\n              case \"CARTLINE_ADD\":\n                return onLineAddComplete == null ? void 0 : onLineAddComplete();\n              case \"CARTLINE_REMOVE\":\n                return onLineRemoveComplete == null ? void 0 : onLineRemoveComplete();\n              case \"CARTLINE_UPDATE\":\n                return onLineUpdateComplete == null ? void 0 : onLineUpdateComplete();\n              case \"NOTE_UPDATE\":\n                return onNoteUpdateComplete == null ? void 0 : onNoteUpdateComplete();\n              case \"BUYER_IDENTITY_UPDATE\":\n                if (countryCodeNotUpdated(context, cartActionEvent)) {\n                  customerOverridesCountryCode.current = true;\n                }\n                return onBuyerIdentityUpdateComplete == null ? void 0 : onBuyerIdentityUpdateComplete();\n              case \"CART_ATTRIBUTES_UPDATE\":\n                return onAttributesUpdateComplete == null ? void 0 : onAttributesUpdateComplete();\n              case \"DISCOUNT_CODES_UPDATE\":\n                return onDiscountCodesUpdateComplete == null ? void 0 : onDiscountCodesUpdateComplete();\n            }\n        }\n      } catch (error) {\n        console.error(\"onCartActionComplete failed\", error);\n      }\n    }\n  });\n  const cartReady = useRef(false);\n  const cartCompleted = cartState.matches(\"cartCompleted\");\n  const countryChanged = (cartState.value === \"idle\" || cartState.value === \"error\" || cartState.value === \"cartCompleted\") && countryCode !== ((_c = (_b = (_a = cartState == null ? void 0 : cartState.context) == null ? void 0 : _a.cart) == null ? void 0 : _b.buyerIdentity) == null ? void 0 : _c.countryCode) && !cartState.context.errors;\n  const fetchingFromStorage = useRef(false);\n  useEffect(() => {\n    if (!cartReady.current && !fetchingFromStorage.current) {\n      if (!cart && storageAvailable(\"localStorage\")) {\n        fetchingFromStorage.current = true;\n        try {\n          const cartId = window.localStorage.getItem(CART_ID_STORAGE_KEY);\n          if (cartId) {\n            cartSend({\n              type: \"CART_FETCH\",\n              payload: {\n                cartId\n              }\n            });\n          }\n        } catch (error) {\n          console.warn(\"error fetching cartId\");\n          console.warn(error);\n        }\n      }\n      cartReady.current = true;\n    }\n  }, [cart, cartReady, cartSend]);\n  useEffect(() => {\n    if (!countryChanged || customerOverridesCountryCode.current) return;\n    cartSend({\n      type: \"BUYER_IDENTITY_UPDATE\",\n      payload: {\n        buyerIdentity: {\n          countryCode,\n          customerAccessToken\n        }\n      }\n    });\n  }, [countryCode, customerAccessToken, countryChanged, customerOverridesCountryCode, cartSend]);\n  const onCartReadySend = useCallback(cartEvent => {\n    if (!cartReady.current) {\n      return console.warn(\"Cart isn't ready yet\");\n    }\n    cartSend(cartEvent);\n  }, [cartSend]);\n  useEffect(() => {\n    var _a2, _b2, _c2;\n    if (((_b2 = (_a2 = cartState == null ? void 0 : cartState.context) == null ? void 0 : _a2.cart) == null ? void 0 : _b2.id) && storageAvailable(\"localStorage\")) {\n      try {\n        window.localStorage.setItem(CART_ID_STORAGE_KEY, (_c2 = cartState.context.cart) == null ? void 0 : _c2.id);\n      } catch (error) {\n        console.warn(\"Failed to save cartId to localStorage\", error);\n      }\n    }\n  }, [(_e = (_d = cartState == null ? void 0 : cartState.context) == null ? void 0 : _d.cart) == null ? void 0 : _e.id]);\n  useEffect(() => {\n    if (cartCompleted && storageAvailable(\"localStorage\")) {\n      try {\n        window.localStorage.removeItem(CART_ID_STORAGE_KEY);\n      } catch (error) {\n        console.warn(\"Failed to delete cartId from localStorage\", error);\n      }\n    }\n  }, [cartCompleted]);\n  const cartCreate = useCallback(cartInput => {\n    var _a2, _b2;\n    if (countryCode && !((_a2 = cartInput.buyerIdentity) == null ? void 0 : _a2.countryCode)) {\n      if (cartInput.buyerIdentity == null) {\n        cartInput.buyerIdentity = {};\n      }\n      cartInput.buyerIdentity.countryCode = countryCode;\n    }\n    if (customerAccessToken && !((_b2 = cartInput.buyerIdentity) == null ? void 0 : _b2.customerAccessToken)) {\n      if (cartInput.buyerIdentity == null) {\n        cartInput.buyerIdentity = {};\n      }\n      cartInput.buyerIdentity.customerAccessToken = customerAccessToken;\n    }\n    onCartReadySend({\n      type: \"CART_CREATE\",\n      payload: cartInput\n    });\n  }, [countryCode, customerAccessToken, onCartReadySend]);\n  const cartDisplayState = useDelayedStateUntilHydration(cartState);\n  const cartContextValue = useMemo(() => {\n    var _a2, _b2, _c2, _d2;\n    return {\n      ...(((_a2 = cartDisplayState == null ? void 0 : cartDisplayState.context) == null ? void 0 : _a2.cart) ?? {\n        lines: [],\n        attributes: []\n      }),\n      status: transposeStatus(cartDisplayState.value),\n      error: (_b2 = cartDisplayState == null ? void 0 : cartDisplayState.context) == null ? void 0 : _b2.errors,\n      totalQuantity: ((_d2 = (_c2 = cartDisplayState == null ? void 0 : cartDisplayState.context) == null ? void 0 : _c2.cart) == null ? void 0 : _d2.totalQuantity) ?? 0,\n      cartCreate,\n      linesAdd(lines) {\n        var _a3, _b3;\n        if ((_b3 = (_a3 = cartDisplayState == null ? void 0 : cartDisplayState.context) == null ? void 0 : _a3.cart) == null ? void 0 : _b3.id) {\n          onCartReadySend({\n            type: \"CARTLINE_ADD\",\n            payload: {\n              lines\n            }\n          });\n        } else {\n          cartCreate({\n            lines\n          });\n        }\n      },\n      linesRemove(lines) {\n        onCartReadySend({\n          type: \"CARTLINE_REMOVE\",\n          payload: {\n            lines\n          }\n        });\n      },\n      linesUpdate(lines) {\n        onCartReadySend({\n          type: \"CARTLINE_UPDATE\",\n          payload: {\n            lines\n          }\n        });\n      },\n      noteUpdate(note) {\n        onCartReadySend({\n          type: \"NOTE_UPDATE\",\n          payload: {\n            note\n          }\n        });\n      },\n      buyerIdentityUpdate(buyerIdentity) {\n        onCartReadySend({\n          type: \"BUYER_IDENTITY_UPDATE\",\n          payload: {\n            buyerIdentity\n          }\n        });\n      },\n      cartAttributesUpdate(attributes) {\n        onCartReadySend({\n          type: \"CART_ATTRIBUTES_UPDATE\",\n          payload: {\n            attributes\n          }\n        });\n      },\n      discountCodesUpdate(discountCodes) {\n        onCartReadySend({\n          type: \"DISCOUNT_CODES_UPDATE\",\n          payload: {\n            discountCodes\n          }\n        });\n      },\n      cartFragment\n    };\n  }, [cartCreate, (_f = cartDisplayState == null ? void 0 : cartDisplayState.context) == null ? void 0 : _f.cart, (_g = cartDisplayState == null ? void 0 : cartDisplayState.context) == null ? void 0 : _g.errors, cartDisplayState.value, cartFragment, onCartReadySend]);\n  return /* @__PURE__ */jsx(CartContext.Provider, {\n    value: cartContextValue,\n    children\n  });\n}\nfunction transposeStatus(status) {\n  switch (status) {\n    case \"uninitialized\":\n    case \"initializationError\":\n      return \"uninitialized\";\n    case \"idle\":\n    case \"cartCompleted\":\n    case \"error\":\n      return \"idle\";\n    case \"cartFetching\":\n      return \"fetching\";\n    case \"cartCreating\":\n      return \"creating\";\n    case \"cartLineAdding\":\n    case \"cartLineRemoving\":\n    case \"cartLineUpdating\":\n    case \"noteUpdating\":\n    case \"buyerIdentityUpdating\":\n    case \"cartAttributesUpdating\":\n    case \"discountCodesUpdating\":\n      return \"updating\";\n  }\n}\nfunction useDelayedStateUntilHydration(state) {\n  const [isPending, startTransition] = useTransition();\n  const [delayedState, setDelayedState] = useState(state);\n  const firstTimePending = useRef(false);\n  if (isPending) {\n    firstTimePending.current = true;\n  }\n  const firstTimePendingFinished = useRef(false);\n  if (!isPending && firstTimePending.current) {\n    firstTimePendingFinished.current = true;\n  }\n  useEffect(() => {\n    startTransition(() => {\n      if (!firstTimePendingFinished.current) {\n        setDelayedState(state);\n      }\n    });\n  }, [state]);\n  const displayState = firstTimePendingFinished.current ? state : delayedState;\n  return displayState;\n}\nfunction storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return !!(e instanceof DOMException && (\n    // everything except Firefox\n    e.code === 22 ||\n    // Firefox\n    e.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" ||\n    // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0);\n  }\n}\nfunction countryCodeNotUpdated(context, event) {\n  var _a, _b;\n  return !!(event.payload.buyerIdentity.countryCode && ((_b = (_a = context.cart) == null ? void 0 : _a.buyerIdentity) == null ? void 0 : _b.countryCode) !== event.payload.buyerIdentity.countryCode);\n}\nexport { CartContext, CartProvider, storageAvailable, useCart };","map":{"version":3,"names":["CartContext","createContext","useCart","context","useContext","Error","CartProvider","_ref","children","numCartLines","onCreate","onLineAdd","onLineRemove","onLineUpdate","onNoteUpdate","onBuyerIdentityUpdate","onAttributesUpdate","onDiscountCodesUpdate","onCreateComplete","onLineAddComplete","onLineRemoveComplete","onLineUpdateComplete","onNoteUpdateComplete","onBuyerIdentityUpdateComplete","onAttributesUpdateComplete","onDiscountCodesUpdateComplete","data","cart","cartFragment","defaultCartFragment","customerAccessToken","countryCode","toUpperCase","prevCountryCode","setPrevCountryCode","useState","prevCustomerAccessToken","setPrevCustomerAccessToken","customerOverridesCountryCode","useRef","current","cartState","cartSend","useCartAPIStateMachine","onCartActionEntry","_","event","type","error","console","onCartActionOptimisticUI","lines","_b2","_a2","filter","line","id","payload","includes","_d2","_c2","map","updatedLine","find","_ref2","quantity","onCartActionComplete","cartActionEvent","countryCodeNotUpdated","cartReady","cartCompleted","matches","countryChanged","value","_c","_b","_a","buyerIdentity","errors","fetchingFromStorage","useEffect","storageAvailable","cartId","window","localStorage","getItem","CART_ID_STORAGE_KEY","warn","onCartReadySend","useCallback","cartEvent","setItem","_e","_d","removeItem","cartCreate","cartInput","cartDisplayState","useDelayedStateUntilHydration","cartContextValue","useMemo","attributes","status","transposeStatus","totalQuantity","linesAdd","_b3","_a3","linesRemove","linesUpdate","noteUpdate","note","buyerIdentityUpdate","cartAttributesUpdate","discountCodesUpdate","discountCodes","_f","_g","jsx","Provider","state","isPending","startTransition","useTransition","delayedState","setDelayedState","firstTimePending","firstTimePendingFinished","displayState","storage","x","e","DOMException","code","name","length"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/CartProvider.tsx"],"sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useTransition,\n  createContext,\n  useContext,\n} from 'react';\nimport {\n  AttributeInput,\n  CartBuyerIdentityInput,\n  CartInput,\n  CartLineInput,\n  CartLineUpdateInput,\n  CountryCode,\n  Cart as CartType,\n  MutationCartNoteUpdateArgs,\n} from './storefront-api-types.js';\nimport {\n  BuyerIdentityUpdateEvent,\n  CartMachineContext,\n  CartMachineEvent,\n  CartMachineTypeState,\n  CartWithActions,\n} from './cart-types.js';\nimport {useCartAPIStateMachine} from './useCartAPIStateMachine.js';\nimport {CART_ID_STORAGE_KEY} from './cart-constants.js';\nimport {PartialDeep} from 'type-fest';\nimport {defaultCartFragment} from './cart-queries.js';\n\nexport const CartContext = createContext<CartWithActions | null>(null);\n\n/**\n * The `useCart` hook provides access to the cart object. It must be a descendent of a `CartProvider` component.\n */\nexport function useCart(): CartWithActions {\n  const context = useContext(CartContext);\n\n  if (!context) {\n    throw new Error('Expected a Cart Context, but no Cart Context was found');\n  }\n\n  return context;\n}\n\ntype CartProviderProps = {\n  /** Any `ReactNode` elements. */\n  children: React.ReactNode;\n  /**  Maximum number of cart lines to fetch. Defaults to 250 cart lines. */\n  numCartLines?: number;\n  /** A callback that is invoked when the process to create a cart begins, but before the cart is created in the Storefront API. */\n  onCreate?: () => void;\n  /** A callback that is invoked when the process to add a line item to the cart begins, but before the line item is added to the Storefront API. */\n  onLineAdd?: () => void;\n  /** A callback that is invoked when the process to remove a line item to the cart begins, but before the line item is removed from the Storefront API. */\n  onLineRemove?: () => void;\n  /** A callback that is invoked when the process to update a line item in the cart begins, but before the line item is updated in the Storefront API. */\n  onLineUpdate?: () => void;\n  /** A callback that is invoked when the process to add or update a note in the cart begins, but before the note is added or updated in the Storefront API. */\n  onNoteUpdate?: () => void;\n  /** A callback that is invoked when the process to update the buyer identity begins, but before the buyer identity is updated in the Storefront API. */\n  onBuyerIdentityUpdate?: () => void;\n  /** A callback that is invoked when the process to update the cart attributes begins, but before the attributes are updated in the Storefront API. */\n  onAttributesUpdate?: () => void;\n  /** A callback that is invoked when the process to update the cart discount codes begins, but before the discount codes are updated in the Storefront API. */\n  onDiscountCodesUpdate?: () => void;\n  /** A callback that is invoked when the process to create a cart completes */\n  onCreateComplete?: () => void;\n  /** A callback that is invoked when the process to add a line item to the cart completes */\n  onLineAddComplete?: () => void;\n  /** A callback that is invoked when the process to remove a line item to the cart completes */\n  onLineRemoveComplete?: () => void;\n  /** A callback that is invoked when the process to update a line item in the cart completes */\n  onLineUpdateComplete?: () => void;\n  /** A callback that is invoked when the process to add or update a note in the cart completes */\n  onNoteUpdateComplete?: () => void;\n  /** A callback that is invoked when the process to update the buyer identity completes */\n  onBuyerIdentityUpdateComplete?: () => void;\n  /** A callback that is invoked when the process to update the cart attributes completes */\n  onAttributesUpdateComplete?: () => void;\n  /** A callback that is invoked when the process to update the cart discount codes completes */\n  onDiscountCodesUpdateComplete?: () => void;\n  /** An object with fields that correspond to the Storefront API's [Cart object](https://shopify.dev/api/storefront/2023-04/objects/cart). */\n  data?: PartialDeep<CartType, {recurseIntoArrays: true}>;\n  /** A fragment used to query the Storefront API's [Cart object](https://shopify.dev/api/storefront/2023-04/objects/cart) for all queries and mutations. A default value is used if no argument is provided. */\n  cartFragment?: string;\n  /** A customer access token that's accessible on the server if there's a customer login. */\n  customerAccessToken?: CartBuyerIdentityInput['customerAccessToken'];\n  /** The ISO country code for i18n. */\n  countryCode?: CountryCode;\n};\n\n/**\n * The `CartProvider` component synchronizes the state of the Storefront API Cart and a customer's cart,\n * and allows you to more easily manipulate the cart by adding, removing, and updating it.\n * It could be placed at the root of your app so that your whole app is able to use the `useCart()` hook anywhere.\n *\n * There are props that trigger when a call to the Storefront API is made, such as `onLineAdd={}` when a line is added to the cart.\n * There are also props that trigger when a call to the Storefront API is completed, such as `onLineAddComplete={}` when the fetch request for adding a line to the cart completes.\n *\n * The `CartProvider` component must be a descendant of the `ShopifyProvider` component.\n */\nexport function CartProvider({\n  children,\n  numCartLines,\n  onCreate,\n  onLineAdd,\n  onLineRemove,\n  onLineUpdate,\n  onNoteUpdate,\n  onBuyerIdentityUpdate,\n  onAttributesUpdate,\n  onDiscountCodesUpdate,\n  onCreateComplete,\n  onLineAddComplete,\n  onLineRemoveComplete,\n  onLineUpdateComplete,\n  onNoteUpdateComplete,\n  onBuyerIdentityUpdateComplete,\n  onAttributesUpdateComplete,\n  onDiscountCodesUpdateComplete,\n  data: cart,\n  cartFragment = defaultCartFragment,\n  customerAccessToken,\n  countryCode = 'US',\n}: CartProviderProps): JSX.Element {\n  if (countryCode) countryCode = countryCode.toUpperCase() as CountryCode;\n  const [prevCountryCode, setPrevCountryCode] = useState(countryCode);\n  const [prevCustomerAccessToken, setPrevCustomerAccessToken] =\n    useState(customerAccessToken);\n  const customerOverridesCountryCode = useRef(false);\n\n  if (\n    prevCountryCode !== countryCode ||\n    prevCustomerAccessToken !== customerAccessToken\n  ) {\n    setPrevCountryCode(countryCode);\n    setPrevCustomerAccessToken(customerAccessToken);\n    customerOverridesCountryCode.current = false;\n  }\n\n  const [cartState, cartSend] = useCartAPIStateMachine({\n    numCartLines,\n    data: cart,\n    cartFragment,\n    countryCode,\n    onCartActionEntry(_, event) {\n      try {\n        switch (event.type) {\n          case 'CART_CREATE':\n            return onCreate?.();\n          case 'CARTLINE_ADD':\n            return onLineAdd?.();\n          case 'CARTLINE_REMOVE':\n            return onLineRemove?.();\n          case 'CARTLINE_UPDATE':\n            return onLineUpdate?.();\n          case 'NOTE_UPDATE':\n            return onNoteUpdate?.();\n          case 'BUYER_IDENTITY_UPDATE':\n            return onBuyerIdentityUpdate?.();\n          case 'CART_ATTRIBUTES_UPDATE':\n            return onAttributesUpdate?.();\n          case 'DISCOUNT_CODES_UPDATE':\n            return onDiscountCodesUpdate?.();\n        }\n      } catch (error) {\n        console.error('Cart entry action failed', error);\n      }\n    },\n    onCartActionOptimisticUI(context, event) {\n      if (!context.cart) return {...context};\n      switch (event.type) {\n        case 'CARTLINE_REMOVE':\n          return {\n            ...context,\n            cart: {\n              ...context.cart,\n              lines: context?.cart?.lines?.filter(\n                (line) => line?.id && !event.payload.lines.includes(line?.id),\n              ),\n            },\n          };\n        case 'CARTLINE_UPDATE':\n          return {\n            ...context,\n            cart: {\n              ...context.cart,\n              lines: context?.cart?.lines?.map((line) => {\n                const updatedLine = event.payload.lines.find(\n                  ({id}) => id === line?.id,\n                );\n\n                if (updatedLine && updatedLine.quantity) {\n                  return {\n                    ...line,\n                    quantity: updatedLine.quantity,\n                  };\n                }\n\n                return line;\n              }),\n            },\n          };\n      }\n      return {...context};\n    },\n    onCartActionComplete(context, event) {\n      const cartActionEvent = event.payload.cartActionEvent;\n      try {\n        switch (event.type) {\n          case 'RESOLVE':\n            switch (cartActionEvent.type) {\n              case 'CART_CREATE':\n                return onCreateComplete?.();\n              case 'CARTLINE_ADD':\n                return onLineAddComplete?.();\n              case 'CARTLINE_REMOVE':\n                return onLineRemoveComplete?.();\n              case 'CARTLINE_UPDATE':\n                return onLineUpdateComplete?.();\n              case 'NOTE_UPDATE':\n                return onNoteUpdateComplete?.();\n              case 'BUYER_IDENTITY_UPDATE':\n                if (countryCodeNotUpdated(context, cartActionEvent)) {\n                  customerOverridesCountryCode.current = true;\n                }\n                return onBuyerIdentityUpdateComplete?.();\n              case 'CART_ATTRIBUTES_UPDATE':\n                return onAttributesUpdateComplete?.();\n              case 'DISCOUNT_CODES_UPDATE':\n                return onDiscountCodesUpdateComplete?.();\n            }\n        }\n      } catch (error) {\n        console.error('onCartActionComplete failed', error);\n      }\n    },\n  });\n\n  const cartReady = useRef(false);\n  const cartCompleted = cartState.matches('cartCompleted');\n\n  const countryChanged =\n    (cartState.value === 'idle' ||\n      cartState.value === 'error' ||\n      cartState.value === 'cartCompleted') &&\n    countryCode !== cartState?.context?.cart?.buyerIdentity?.countryCode &&\n    !cartState.context.errors;\n\n  const fetchingFromStorage = useRef(false);\n\n  /**\n   * Initializes cart with priority in this order:\n   * 1. cart props\n   * 2. localStorage cartId\n   */\n  useEffect(() => {\n    if (!cartReady.current && !fetchingFromStorage.current) {\n      if (!cart && storageAvailable('localStorage')) {\n        fetchingFromStorage.current = true;\n        try {\n          const cartId = window.localStorage.getItem(CART_ID_STORAGE_KEY);\n          if (cartId) {\n            cartSend({type: 'CART_FETCH', payload: {cartId}});\n          }\n        } catch (error) {\n          console.warn('error fetching cartId');\n          console.warn(error);\n        }\n      }\n      cartReady.current = true;\n    }\n  }, [cart, cartReady, cartSend]);\n\n  // Update cart country code if cart and props countryCode's as different\n  useEffect(() => {\n    if (!countryChanged || customerOverridesCountryCode.current) return;\n    cartSend({\n      type: 'BUYER_IDENTITY_UPDATE',\n      payload: {buyerIdentity: {countryCode, customerAccessToken}},\n    });\n  }, [\n    countryCode,\n    customerAccessToken,\n    countryChanged,\n    customerOverridesCountryCode,\n    cartSend,\n  ]);\n\n  // send cart events when ready\n  const onCartReadySend = useCallback(\n    (cartEvent: CartMachineEvent) => {\n      if (!cartReady.current) {\n        return console.warn(\"Cart isn't ready yet\");\n      }\n      cartSend(cartEvent);\n    },\n    [cartSend],\n  );\n\n  // save cart id to local storage\n  useEffect(() => {\n    if (cartState?.context?.cart?.id && storageAvailable('localStorage')) {\n      try {\n        window.localStorage.setItem(\n          CART_ID_STORAGE_KEY,\n          cartState.context.cart?.id,\n        );\n      } catch (error) {\n        console.warn('Failed to save cartId to localStorage', error);\n      }\n    }\n  }, [cartState?.context?.cart?.id]);\n\n  // delete cart from local storage if cart fetched has been completed\n  useEffect(() => {\n    if (cartCompleted && storageAvailable('localStorage')) {\n      try {\n        window.localStorage.removeItem(CART_ID_STORAGE_KEY);\n      } catch (error) {\n        console.warn('Failed to delete cartId from localStorage', error);\n      }\n    }\n  }, [cartCompleted]);\n\n  const cartCreate = useCallback(\n    (cartInput: CartInput) => {\n      if (countryCode && !cartInput.buyerIdentity?.countryCode) {\n        if (cartInput.buyerIdentity == null) {\n          cartInput.buyerIdentity = {};\n        }\n        cartInput.buyerIdentity.countryCode = countryCode;\n      }\n\n      if (\n        customerAccessToken &&\n        !cartInput.buyerIdentity?.customerAccessToken\n      ) {\n        if (cartInput.buyerIdentity == null) {\n          cartInput.buyerIdentity = {};\n        }\n        cartInput.buyerIdentity.customerAccessToken = customerAccessToken;\n      }\n      onCartReadySend({\n        type: 'CART_CREATE',\n        payload: cartInput,\n      });\n    },\n    [countryCode, customerAccessToken, onCartReadySend],\n  );\n\n  // Delays the cart state in the context if the page is hydrating\n  // preventing suspense boundary errors.\n  const cartDisplayState = useDelayedStateUntilHydration(cartState);\n\n  const cartContextValue = useMemo<CartWithActions>(() => {\n    return {\n      ...(cartDisplayState?.context?.cart ?? {lines: [], attributes: []}),\n      status: transposeStatus(cartDisplayState.value),\n      error: cartDisplayState?.context?.errors,\n      totalQuantity: cartDisplayState?.context?.cart?.totalQuantity ?? 0,\n      cartCreate,\n      linesAdd(lines: CartLineInput[]): void {\n        if (cartDisplayState?.context?.cart?.id) {\n          onCartReadySend({\n            type: 'CARTLINE_ADD',\n            payload: {lines},\n          });\n        } else {\n          cartCreate({lines});\n        }\n      },\n      linesRemove(lines: string[]): void {\n        onCartReadySend({\n          type: 'CARTLINE_REMOVE',\n          payload: {\n            lines,\n          },\n        });\n      },\n      linesUpdate(lines: CartLineUpdateInput[]): void {\n        onCartReadySend({\n          type: 'CARTLINE_UPDATE',\n          payload: {\n            lines,\n          },\n        });\n      },\n      noteUpdate(note: MutationCartNoteUpdateArgs['note']): void {\n        onCartReadySend({\n          type: 'NOTE_UPDATE',\n          payload: {\n            note,\n          },\n        });\n      },\n      buyerIdentityUpdate(buyerIdentity: CartBuyerIdentityInput): void {\n        onCartReadySend({\n          type: 'BUYER_IDENTITY_UPDATE',\n          payload: {\n            buyerIdentity,\n          },\n        });\n      },\n      cartAttributesUpdate(attributes: AttributeInput[]): void {\n        onCartReadySend({\n          type: 'CART_ATTRIBUTES_UPDATE',\n          payload: {\n            attributes,\n          },\n        });\n      },\n      discountCodesUpdate(discountCodes: string[]): void {\n        onCartReadySend({\n          type: 'DISCOUNT_CODES_UPDATE',\n          payload: {\n            discountCodes,\n          },\n        });\n      },\n      cartFragment,\n    };\n  }, [\n    cartCreate,\n    cartDisplayState?.context?.cart,\n    cartDisplayState?.context?.errors,\n    cartDisplayState.value,\n    cartFragment,\n    onCartReadySend,\n  ]);\n\n  return (\n    <CartContext.Provider value={cartContextValue}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nfunction transposeStatus(\n  status: CartMachineTypeState['value'],\n): CartWithActions['status'] {\n  switch (status) {\n    case 'uninitialized':\n    case 'initializationError':\n      return 'uninitialized';\n    case 'idle':\n    case 'cartCompleted':\n    case 'error':\n      return 'idle';\n    case 'cartFetching':\n      return 'fetching';\n    case 'cartCreating':\n      return 'creating';\n    case 'cartLineAdding':\n    case 'cartLineRemoving':\n    case 'cartLineUpdating':\n    case 'noteUpdating':\n    case 'buyerIdentityUpdating':\n    case 'cartAttributesUpdating':\n    case 'discountCodesUpdating':\n      return 'updating';\n  }\n}\n\n/**\n * Delays a state update until hydration finishes. Useful for preventing suspense boundaries errors when updating a context\n * @remarks this uses startTransition and waits for it to finish.\n */\nfunction useDelayedStateUntilHydration<T>(state: T): T {\n  const [isPending, startTransition] = useTransition();\n  const [delayedState, setDelayedState] = useState(state);\n\n  const firstTimePending = useRef(false);\n  if (isPending) {\n    firstTimePending.current = true;\n  }\n\n  const firstTimePendingFinished = useRef(false);\n  if (!isPending && firstTimePending.current) {\n    firstTimePendingFinished.current = true;\n  }\n\n  useEffect(() => {\n    startTransition(() => {\n      if (!firstTimePendingFinished.current) {\n        setDelayedState(state);\n      }\n    });\n  }, [state]);\n\n  const displayState = firstTimePendingFinished.current ? state : delayedState;\n\n  return displayState;\n}\n\n/** Check for storage availability funciton obtained from\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\n */\nexport function storageAvailable(\n  type: 'localStorage' | 'sessionStorage',\n): boolean {\n  let storage;\n  try {\n    storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return !!(\n      e instanceof DOMException &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nfunction countryCodeNotUpdated(\n  context: CartMachineContext,\n  event: BuyerIdentityUpdateEvent,\n): boolean {\n  return !!(\n    event.payload.buyerIdentity.countryCode &&\n    context.cart?.buyerIdentity?.countryCode !==\n      event.payload.buyerIdentity.countryCode\n  );\n}\n"],"mappings":";;;;;AAgCa,MAAAA,WAAA,GAAcC,aAAA,CAAsC,IAAI;AAK9D,SAASC,QAAA,EAA2B;EACnC,MAAAC,OAAA,GAAUC,UAAA,CAAWJ,WAAW;EAEtC,IAAI,CAACG,OAAA,EAAS;IACN,UAAIE,KAAA,CAAM,wDAAwD;EAC1E;EAEO,OAAAF,OAAA;AACT;AA2DO,SAASG,aAAAC,IAAA,EAuBmB;EAAA,IAvBN;IAC3BC,QAAA;IACAC,YAAA;IACAC,QAAA;IACAC,SAAA;IACAC,YAAA;IACAC,YAAA;IACAC,YAAA;IACAC,qBAAA;IACAC,kBAAA;IACAC,qBAAA;IACAC,gBAAA;IACAC,iBAAA;IACAC,oBAAA;IACAC,oBAAA;IACAC,oBAAA;IACAC,6BAAA;IACAC,0BAAA;IACAC,6BAAA;IACAC,IAAA,EAAMC,IAAA;IACNC,YAAA,GAAeC,mBAAA;IACfC,mBAAA;IACAC,WAAA,GAAc;EAChB,IAAAxB,IAAA;;EACM,IAAAwB,WAAA,EAAaA,WAAA,GAAcA,WAAA,CAAYC,WAAA;EAC3C,MAAM,CAACC,eAAA,EAAiBC,kBAAkB,IAAIC,QAAA,CAASJ,WAAW;EAClE,MAAM,CAACK,uBAAA,EAAyBC,0BAA0B,IACxDF,QAAA,CAASL,mBAAmB;EACxB,MAAAQ,4BAAA,GAA+BC,MAAA,CAAO,KAAK;EAG/C,IAAAN,eAAA,KAAoBF,WAAA,IACpBK,uBAAA,KAA4BN,mBAAA,EAC5B;IACAI,kBAAA,CAAmBH,WAAW;IAC9BM,0BAAA,CAA2BP,mBAAmB;IAC9CQ,4BAAA,CAA6BE,OAAA,GAAU;EACzC;EAEA,MAAM,CAACC,SAAA,EAAWC,QAAQ,IAAIC,sBAAA,CAAuB;IACnDlC,YAAA;IACAiB,IAAA,EAAMC,IAAA;IACNC,YAAA;IACAG,WAAA;IACAa,kBAAkBC,CAAA,EAAGC,KAAA,EAAO;MACtB;QACF,QAAQA,KAAA,CAAMC,IAAA;UACZ,KAAK;YACH,OAAOrC,QAAA,oBAAAA,QAAA;UACT,KAAK;YACH,OAAOC,SAAA,oBAAAA,SAAA;UACT,KAAK;YACH,OAAOC,YAAA,oBAAAA,YAAA;UACT,KAAK;YACH,OAAOC,YAAA,oBAAAA,YAAA;UACT,KAAK;YACH,OAAOC,YAAA,oBAAAA,YAAA;UACT,KAAK;YACH,OAAOC,qBAAA,oBAAAA,qBAAA;UACT,KAAK;YACH,OAAOC,kBAAA,oBAAAA,kBAAA;UACT,KAAK;YACH,OAAOC,qBAAA,oBAAAA,qBAAA;QACX;MAAA,SACO+B,KAAA;QACCC,OAAA,CAAAD,KAAA,CAAM,4BAA4BA,KAAK;MACjD;IACF;IACAE,yBAAyB/C,OAAA,EAAS2C,KAAA,EAAO;;MACvC,IAAI,CAAC3C,OAAA,CAAQwB,IAAA,EAAa;QAAC,GAAGxB;MAAA;MAC9B,QAAQ2C,KAAA,CAAMC,IAAA;QACZ,KAAK;UACI;YACL,GAAG5C,OAAA;YACHwB,IAAA,EAAM;cACJ,GAAGxB,OAAA,CAAQwB,IAAA;cACXwB,KAAA,GAAOC,GAAA,IAAAC,GAAA,GAAAlD,OAAA,oBAAAA,OAAA,CAASwB,IAAA,KAAT,gBAAA0B,GAAA,CAAeF,KAAA,KAAf,gBAAAC,GAAA,CAAsBE,MAAA,CAC1BC,IAAA,KAASA,IAAA,oBAAAA,IAAA,CAAMC,EAAA,KAAM,CAACV,KAAA,CAAMW,OAAA,CAAQN,KAAA,CAAMO,QAAA,CAASH,IAAA,oBAAAA,IAAA,CAAMC,EAAE;YAEhE;UAAA;QAEJ,KAAK;UACI;YACL,GAAGrD,OAAA;YACHwB,IAAA,EAAM;cACJ,GAAGxB,OAAA,CAAQwB,IAAA;cACXwB,KAAA,GAAOQ,GAAA,IAAAC,GAAA,GAAAzD,OAAA,oBAAAA,OAAA,CAASwB,IAAA,KAAT,gBAAAiC,GAAA,CAAeT,KAAA,KAAf,gBAAAQ,GAAA,CAAsBE,GAAA,CAAKN,IAAA,IAAS;gBACnC,MAAAO,WAAA,GAAchB,KAAA,CAAMW,OAAA,CAAQN,KAAA,CAAMY,IAAA,CACtCC,KAAA;kBAAA,IAAC;oBAACR;kBAAE,IAAAQ,KAAA;kBAAA,OAAMR,EAAA,MAAOD,IAAA,oBAAAA,IAAA,CAAMC,EAAA;gBAAA;gBAGrB,IAAAM,WAAA,IAAeA,WAAA,CAAYG,QAAA,EAAU;kBAChC;oBACL,GAAGV,IAAA;oBACHU,QAAA,EAAUH,WAAA,CAAYG;kBAAA;gBAE1B;gBAEO,OAAAV,IAAA;cAAA;YAEX;UAAA;MAEN;MACO;QAAC,GAAGpD;MAAA;IACb;IACA+D,qBAAqB/D,OAAA,EAAS2C,KAAA,EAAO;MAC7B,MAAAqB,eAAA,GAAkBrB,KAAA,CAAMW,OAAA,CAAQU,eAAA;MAClC;QACF,QAAQrB,KAAA,CAAMC,IAAA;UACZ,KAAK;YACH,QAAQoB,eAAA,CAAgBpB,IAAA;cACtB,KAAK;gBACH,OAAO7B,gBAAA,oBAAAA,gBAAA;cACT,KAAK;gBACH,OAAOC,iBAAA,oBAAAA,iBAAA;cACT,KAAK;gBACH,OAAOC,oBAAA,oBAAAA,oBAAA;cACT,KAAK;gBACH,OAAOC,oBAAA,oBAAAA,oBAAA;cACT,KAAK;gBACH,OAAOC,oBAAA,oBAAAA,oBAAA;cACT,KAAK;gBACC,IAAA8C,qBAAA,CAAsBjE,OAAA,EAASgE,eAAe,GAAG;kBACnD7B,4BAAA,CAA6BE,OAAA,GAAU;gBACzC;gBACA,OAAOjB,6BAAA,oBAAAA,6BAAA;cACT,KAAK;gBACH,OAAOC,0BAAA,oBAAAA,0BAAA;cACT,KAAK;gBACH,OAAOC,6BAAA,oBAAAA,6BAAA;YACX;QACJ;MAAA,SACOuB,KAAA;QACCC,OAAA,CAAAD,KAAA,CAAM,+BAA+BA,KAAK;MACpD;IACF;EAAA,CACD;EAEK,MAAAqB,SAAA,GAAY9B,MAAA,CAAO,KAAK;EACxB,MAAA+B,aAAA,GAAgB7B,SAAA,CAAU8B,OAAA,CAAQ,eAAe;EAEvD,MAAMC,cAAA,IACH/B,SAAA,CAAUgC,KAAA,KAAU,UACnBhC,SAAA,CAAUgC,KAAA,KAAU,WACpBhC,SAAA,CAAUgC,KAAA,KAAU,oBACtB1C,WAAA,OAAgB2C,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAnC,SAAA,oBAAAA,SAAA,CAAWtC,OAAA,KAAX,gBAAAyE,EAAA,CAAoBjD,IAAA,KAApB,gBAAAgD,EAAA,CAA0BE,aAAA,KAA1B,gBAAAH,EAAA,CAAyC3C,WAAA,KACzD,CAACU,SAAA,CAAUtC,OAAA,CAAQ2E,MAAA;EAEf,MAAAC,mBAAA,GAAsBxC,MAAA,CAAO,KAAK;EAOxCyC,SAAA,CAAU,MAAM;IACd,IAAI,CAACX,SAAA,CAAU7B,OAAA,IAAW,CAACuC,mBAAA,CAAoBvC,OAAA,EAAS;MACtD,IAAI,CAACb,IAAA,IAAQsD,gBAAA,CAAiB,cAAc,GAAG;QAC7CF,mBAAA,CAAoBvC,OAAA,GAAU;QAC1B;UACF,MAAM0C,MAAA,GAASC,MAAA,CAAOC,YAAA,CAAaC,OAAA,CAAQC,mBAAmB;UAC9D,IAAIJ,MAAA,EAAQ;YACVxC,QAAA,CAAS;cAACK,IAAA,EAAM;cAAcU,OAAA,EAAS;gBAACyB;cAAA;YAAA,CAAQ;UAClD;QAAA,SACOlC,KAAA;UACPC,OAAA,CAAQsC,IAAA,CAAK,uBAAuB;UACpCtC,OAAA,CAAQsC,IAAA,CAAKvC,KAAK;QACpB;MACF;MACAqB,SAAA,CAAU7B,OAAA,GAAU;IACtB;EACC,IAACb,IAAA,EAAM0C,SAAA,EAAW3B,QAAQ,CAAC;EAG9BsC,SAAA,CAAU,MAAM;IACV,KAACR,cAAA,IAAkBlC,4BAAA,CAA6BE,OAAA,EAAS;IACpDE,QAAA;MACPK,IAAA,EAAM;MACNU,OAAA,EAAS;QAACoB,aAAA,EAAe;UAAC9C,WAAA;UAAaD;QAAA;MAAoB;IAAA,CAC5D;EAAA,GACA,CACDC,WAAA,EACAD,mBAAA,EACA0C,cAAA,EACAlC,4BAAA,EACAI,QAAA,CACD;EAGD,MAAM8C,eAAA,GAAkBC,WAAA,CACrBC,SAAA,IAAgC;IAC3B,KAACrB,SAAA,CAAU7B,OAAA,EAAS;MACf,OAAAS,OAAA,CAAQsC,IAAA,CAAK,sBAAsB;IAC5C;IACA7C,QAAA,CAASgD,SAAS;EACpB,GACA,CAAChD,QAAQ;EAIXsC,SAAA,CAAU,MAAM;;IACd,MAAI5B,GAAA,IAAAC,GAAA,GAAAZ,SAAA,oBAAAA,SAAA,CAAWtC,OAAA,KAAX,gBAAAkD,GAAA,CAAoB1B,IAAA,KAApB,gBAAAyB,GAAA,CAA0BI,EAAA,KAAMyB,gBAAA,CAAiB,cAAc,GAAG;MAChE;QACFE,MAAA,CAAOC,YAAA,CAAaO,OAAA,CAClBL,mBAAA,GACA1B,GAAA,GAAAnB,SAAA,CAAUtC,OAAA,CAAQwB,IAAA,KAAlB,gBAAAiC,GAAA,CAAwBJ,EAAA;MAAA,SAEnBR,KAAA;QACCC,OAAA,CAAAsC,IAAA,CAAK,yCAAyCvC,KAAK;MAC7D;IACF;EAAA,GACC,EAAC4C,EAAA,IAAAC,EAAA,GAAApD,SAAA,oBAAAA,SAAA,CAAWtC,OAAA,KAAX,gBAAA0F,EAAA,CAAoBlE,IAAA,KAApB,gBAAAiE,EAAA,CAA0BpC,EAAE,CAAC;EAGjCwB,SAAA,CAAU,MAAM;IACV,IAAAV,aAAA,IAAiBW,gBAAA,CAAiB,cAAc,GAAG;MACjD;QACKE,MAAA,CAAAC,YAAA,CAAaU,UAAA,CAAWR,mBAAmB;MAAA,SAC3CtC,KAAA;QACCC,OAAA,CAAAsC,IAAA,CAAK,6CAA6CvC,KAAK;MACjE;IACF;EAAA,GACC,CAACsB,aAAa,CAAC;EAElB,MAAMyB,UAAA,GAAaN,WAAA,CAChBO,SAAA,IAAyB;;IACxB,IAAIjE,WAAA,IAAe,GAACsB,GAAA,GAAA2C,SAAA,CAAUnB,aAAA,KAAV,gBAAAxB,GAAA,CAAyBtB,WAAA,GAAa;MACpD,IAAAiE,SAAA,CAAUnB,aAAA,IAAiB,MAAM;QACnCmB,SAAA,CAAUnB,aAAA,GAAgB;MAC5B;MACAmB,SAAA,CAAUnB,aAAA,CAAc9C,WAAA,GAAcA,WAAA;IACxC;IAEA,IACED,mBAAA,IACA,GAACsB,GAAA,GAAA4C,SAAA,CAAUnB,aAAA,KAAV,gBAAAzB,GAAA,CAAyBtB,mBAAA,GAC1B;MACI,IAAAkE,SAAA,CAAUnB,aAAA,IAAiB,MAAM;QACnCmB,SAAA,CAAUnB,aAAA,GAAgB;MAC5B;MACAmB,SAAA,CAAUnB,aAAA,CAAc/C,mBAAA,GAAsBA,mBAAA;IAChD;IACgB0D,eAAA;MACdzC,IAAA,EAAM;MACNU,OAAA,EAASuC;IAAA,CACV;EACH,GACA,CAACjE,WAAA,EAAaD,mBAAA,EAAqB0D,eAAe;EAK9C,MAAAS,gBAAA,GAAmBC,6BAAA,CAA8BzD,SAAS;EAE1D,MAAA0D,gBAAA,GAAmBC,OAAA,CAAyB,MAAM;;IAC/C;MACL,MAAI/C,GAAA,GAAA4C,gBAAA,oBAAAA,gBAAA,CAAkB9F,OAAA,KAAlB,gBAAAkD,GAAA,CAA2B1B,IAAA,KAAQ;QAACwB,KAAA,EAAO,EAAC;QAAGkD,UAAA,EAAY;MAAE;MACjEC,MAAA,EAAQC,eAAA,CAAgBN,gBAAA,CAAiBxB,KAAK;MAC9CzB,KAAA,GAAOI,GAAA,GAAA6C,gBAAA,oBAAAA,gBAAA,CAAkB9F,OAAA,KAAlB,gBAAAiD,GAAA,CAA2B0B,MAAA;MAClC0B,aAAA,IAAe7C,GAAA,IAAAC,GAAA,GAAAqC,gBAAA,oBAAAA,gBAAA,CAAkB9F,OAAA,KAAlB,gBAAAyD,GAAA,CAA2BjC,IAAA,KAA3B,gBAAAgC,GAAA,CAAiC6C,aAAA,KAAiB;MACjET,UAAA;MACAU,SAAStD,KAAA,EAA8B;;QACjC,KAAAuD,GAAA,IAAAC,GAAA,GAAAV,gBAAA,oBAAAA,gBAAA,CAAkB9F,OAAA,KAAlB,gBAAAwG,GAAA,CAA2BhF,IAAA,KAA3B,gBAAA+E,GAAA,CAAiClD,EAAA,EAAI;UACvBgC,eAAA;YACdzC,IAAA,EAAM;YACNU,OAAA,EAAS;cAACN;YAAK;UAAA,CAChB;QAAA,OACI;UACM4C,UAAA;YAAC5C;UAAA,CAAM;QACpB;MACF;MACAyD,YAAYzD,KAAA,EAAuB;QACjBqC,eAAA;UACdzC,IAAA,EAAM;UACNU,OAAA,EAAS;YACPN;UACF;QAAA,CACD;MACH;MACA0D,YAAY1D,KAAA,EAAoC;QAC9BqC,eAAA;UACdzC,IAAA,EAAM;UACNU,OAAA,EAAS;YACPN;UACF;QAAA,CACD;MACH;MACA2D,WAAWC,IAAA,EAAgD;QACzCvB,eAAA;UACdzC,IAAA,EAAM;UACNU,OAAA,EAAS;YACPsD;UACF;QAAA,CACD;MACH;MACAC,oBAAoBnC,aAAA,EAA6C;QAC/CW,eAAA;UACdzC,IAAA,EAAM;UACNU,OAAA,EAAS;YACPoB;UACF;QAAA,CACD;MACH;MACAoC,qBAAqBZ,UAAA,EAAoC;QACvCb,eAAA;UACdzC,IAAA,EAAM;UACNU,OAAA,EAAS;YACP4C;UACF;QAAA,CACD;MACH;MACAa,oBAAoBC,aAAA,EAA+B;QACjC3B,eAAA;UACdzC,IAAA,EAAM;UACNU,OAAA,EAAS;YACP0D;UACF;QAAA,CACD;MACH;MACAvF;IAAA;EACF,GACC,CACDmE,UAAA,GACAqB,EAAA,GAAAnB,gBAAA,oBAAAA,gBAAA,CAAkB9F,OAAA,KAAlB,gBAAAiH,EAAA,CAA2BzF,IAAA,GAC3B0F,EAAA,GAAApB,gBAAA,oBAAAA,gBAAA,CAAkB9F,OAAA,KAAlB,gBAAAkH,EAAA,CAA2BvC,MAAA,EAC3BmB,gBAAA,CAAiBxB,KAAA,EACjB7C,YAAA,EACA4D,eAAA,CACD;EAED,sBAAA8B,GAAA,CACGtH,WAAA,CAAYuH,QAAA,EAAZ;IAAqB9C,KAAA,EAAO0B,gBAAA;IAC1B3F;EACH;AAEJ;AAEA,SAAS+F,gBACPD,MAAA,EAC2B;EAC3B,QAAQA,MAAA;IACN,KAAK;IACL,KAAK;MACI;IACT,KAAK;IACL,KAAK;IACL,KAAK;MACI;IACT,KAAK;MACI;IACT,KAAK;MACI;IACT,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;MACI;EACX;AACF;AAMA,SAASJ,8BAAiCsB,KAAA,EAAa;EACrD,MAAM,CAACC,SAAA,EAAWC,eAAe,IAAIC,aAAA,CAAc;EACnD,MAAM,CAACC,YAAA,EAAcC,eAAe,IAAI1F,QAAA,CAASqF,KAAK;EAEhD,MAAAM,gBAAA,GAAmBvF,MAAA,CAAO,KAAK;EACrC,IAAIkF,SAAA,EAAW;IACbK,gBAAA,CAAiBtF,OAAA,GAAU;EAC7B;EAEM,MAAAuF,wBAAA,GAA2BxF,MAAA,CAAO,KAAK;EACzC,KAACkF,SAAA,IAAaK,gBAAA,CAAiBtF,OAAA,EAAS;IAC1CuF,wBAAA,CAAyBvF,OAAA,GAAU;EACrC;EAEAwC,SAAA,CAAU,MAAM;IACd0C,eAAA,CAAgB,MAAM;MAChB,KAACK,wBAAA,CAAyBvF,OAAA,EAAS;QACrCqF,eAAA,CAAgBL,KAAK;MACvB;IAAA,CACD;EAAA,GACA,CAACA,KAAK,CAAC;EAEJ,MAAAQ,YAAA,GAAeD,wBAAA,CAAyBvF,OAAA,GAAUgF,KAAA,GAAQI,YAAA;EAEzD,OAAAI,YAAA;AACT;AAKO,SAAS/C,iBACdlC,IAAA,EACS;EACL,IAAAkF,OAAA;EACA;IACFA,OAAA,GAAU9C,MAAA,CAAOpC,IAAI;IACrB,MAAMmF,CAAA,GAAI;IACFD,OAAA,CAAAtC,OAAA,CAAQuC,CAAA,EAAGA,CAAC;IACpBD,OAAA,CAAQnC,UAAA,CAAWoC,CAAC;IACb;EAAA,SACAC,CAAA;IACA,QAAC,EACNA,CAAA,YAAaC,YAAA;IAAA;IAEZD,CAAA,CAAEE,IAAA,KAAS;IAAA;IAEVF,CAAA,CAAEE,IAAA,KAAS;IAAA;IAAA;IAGXF,CAAA,CAAEG,IAAA,KAAS;IAAA;IAEXH,CAAA,CAAEG,IAAA,KAAS;IAAA;IAEbL,OAAA,IACAA,OAAA,CAAQM,MAAA,KAAW;EAEvB;AACF;AAEA,SAASnE,sBACPjE,OAAA,EACA2C,KAAA,EACS;;EACT,OAAO,CAAC,EACNA,KAAA,CAAMW,OAAA,CAAQoB,aAAA,CAAc9C,WAAA,MAC5B4C,EAAA,IAAAC,EAAA,GAAAzE,OAAA,CAAQwB,IAAA,KAAR,gBAAAiD,EAAA,CAAcC,aAAA,KAAd,gBAAAF,EAAA,CAA6B5C,WAAA,MAC3Be,KAAA,CAAMW,OAAA,CAAQoB,aAAA,CAAc9C,WAAA;AAElC"},"metadata":{},"sourceType":"module","externalDependencies":[]}