{"ast":null,"code":"function schemaWrapper(schemaId, payload) {\n  return {\n    schema_id: schemaId,\n    payload,\n    metadata: {\n      event_created_at_ms: Date.now()\n    }\n  };\n}\nfunction parseGid(gid) {\n  const defaultReturn = {\n    id: \"\",\n    resource: null\n  };\n  if (typeof gid !== \"string\") {\n    return defaultReturn;\n  }\n  const matches = gid.match(/^gid:\\/\\/shopify\\/(\\w+)\\/([^/]+)/);\n  if (!matches || matches.length === 1) {\n    return defaultReturn;\n  }\n  const id = matches[2] ?? null;\n  const resource = matches[1] ?? null;\n  return {\n    id,\n    resource\n  };\n}\nfunction addDataIf(keyValuePairs, formattedData) {\n  if (typeof keyValuePairs !== \"object\") {\n    return {};\n  }\n  Object.entries(keyValuePairs).forEach(_ref => {\n    let [key, value] = _ref;\n    if (value) {\n      formattedData[key] = value;\n    }\n  });\n  return formattedData;\n}\nfunction errorIfServer(fnName) {\n  if (typeof document === \"undefined\") {\n    console.error(`${fnName} should only be used within the useEffect callback or event handlers`);\n    return true;\n  }\n  return false;\n}\nexport { addDataIf, errorIfServer, parseGid, schemaWrapper };","map":{"version":3,"names":["schemaWrapper","schemaId","payload","schema_id","metadata","event_created_at_ms","Date","now","parseGid","gid","defaultReturn","id","resource","matches","match","length","addDataIf","keyValuePairs","formattedData","Object","entries","forEach","_ref","key","value","errorIfServer","fnName","document","console","error"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/analytics-utils.ts"],"sourcesContent":["import type {\n  ShopifyMonorailPayload,\n  ShopifyMonorailEvent,\n  ShopifyGId,\n} from './analytics-types.js';\n\n/**\n * Builds a Shopify Monorail event from a Shopify Monorail payload and a schema ID.\n * @param payload - The Monorail payload\n * @param schemaId - The schema ID to use\n * @returns The formatted payload\n **/\nexport function schemaWrapper(\n  schemaId: string,\n  payload: ShopifyMonorailPayload,\n): ShopifyMonorailEvent {\n  return {\n    schema_id: schemaId,\n    payload,\n    metadata: {\n      event_created_at_ms: Date.now(),\n    },\n  };\n}\n\n/**\n * Parses global id (gid) and returns the resource type and id.\n * @see https://shopify.dev/api/usage/gids\n * @param gid - A shopify GID (string)\n *\n * @example\n * ```ts\n * const {id, resource} = parseGid('gid://shopify/Order/123')\n * // => id = \"123\", resource = 'Order'\n *\n *  * const {id, resource} = parseGid('gid://shopify/Cart/abc123')\n * // => id = \"abc123\", resource = 'Cart'\n * ```\n **/\nexport function parseGid(gid: string | undefined): ShopifyGId {\n  const defaultReturn = {id: '', resource: null};\n\n  if (typeof gid !== 'string') {\n    return defaultReturn;\n  }\n\n  // TODO: add support for parsing query parameters on complex gids\n  // Reference: https://shopify.dev/api/usage/gids\n  const matches = gid.match(/^gid:\\/\\/shopify\\/(\\w+)\\/([^/]+)/);\n\n  if (!matches || matches.length === 1) {\n    return defaultReturn;\n  }\n  const id = matches[2] ?? null;\n  const resource = matches[1] ?? null;\n\n  return {id, resource};\n}\n\n/**\n * Filters properties from an object and returns a new object with only the properties that have a truthy value.\n * @param keyValuePairs - An object of key-value pairs\n * @param formattedData - An object which will hold the truthy values\n * @returns The formatted object\n **/\nexport function addDataIf(\n  keyValuePairs: ShopifyMonorailPayload,\n  formattedData: ShopifyMonorailPayload,\n): ShopifyMonorailPayload {\n  if (typeof keyValuePairs !== 'object') {\n    return {};\n  }\n  Object.entries(keyValuePairs).forEach(([key, value]) => {\n    if (value) {\n      formattedData[key] = value;\n    }\n  });\n  return formattedData;\n}\n\n/**\n * Utility that errors if a function is called on the server.\n * @param fnName - The name of the function\n * @returns A boolean\n **/\nexport function errorIfServer(fnName: string): boolean {\n  if (typeof document === 'undefined') {\n    console.error(\n      `${fnName} should only be used within the useEffect callback or event handlers`,\n    );\n    return true;\n  }\n  return false;\n}\n"],"mappings":"AAYgB,SAAAA,cACdC,QAAA,EACAC,OAAA,EACsB;EACf;IACLC,SAAA,EAAWF,QAAA;IACXC,OAAA;IACAE,QAAA,EAAU;MACRC,mBAAA,EAAqBC,IAAA,CAAKC,GAAA,CAAI;IAChC;EAAA;AAEJ;AAgBO,SAASC,SAASC,GAAA,EAAqC;EAC5D,MAAMC,aAAA,GAAgB;IAACC,EAAA,EAAI;IAAIC,QAAA,EAAU;EAAI;EAEzC,WAAOH,GAAA,KAAQ,UAAU;IACpB,OAAAC,aAAA;EACT;EAIM,MAAAG,OAAA,GAAUJ,GAAA,CAAIK,KAAA,CAAM,kCAAkC;EAE5D,IAAI,CAACD,OAAA,IAAWA,OAAA,CAAQE,MAAA,KAAW,GAAG;IAC7B,OAAAL,aAAA;EACT;EACM,MAAAC,EAAA,GAAKE,OAAA,CAAQ,CAAC,KAAK;EACnB,MAAAD,QAAA,GAAWC,OAAA,CAAQ,CAAC,KAAK;EAExB;IAACF,EAAA;IAAIC;EAAA;AACd;AAQgB,SAAAI,UACdC,aAAA,EACAC,aAAA,EACwB;EACpB,WAAOD,aAAA,KAAkB,UAAU;IACrC,OAAO;EACT;EACOE,MAAA,CAAAC,OAAA,CAAQH,aAAa,EAAEI,OAAA,CAAQC,IAAA,IAAkB;IAAA,IAAjB,CAACC,GAAA,EAAKC,KAAK,IAAAF,IAAA;IAChD,IAAIE,KAAA,EAAO;MACTN,aAAA,CAAcK,GAAG,IAAIC,KAAA;IACvB;EAAA,CACD;EACM,OAAAN,aAAA;AACT;AAOO,SAASO,cAAcC,MAAA,EAAyB;EACjD,WAAOC,QAAA,KAAa,aAAa;IAC3BC,OAAA,CAAAC,KAAA,CACN,GAAGH,MAAA;IAEE;EACT;EACO;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}