{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { useCallback } from \"react\";\nfunction BaseButton(props) {\n  const {\n    as,\n    onClick,\n    defaultOnClick,\n    children,\n    buttonRef,\n    ...passthroughProps\n  } = props;\n  const handleOnClick = useCallback(event => {\n    if (onClick) {\n      const clickShouldContinue = onClick(event);\n      if (typeof clickShouldContinue === \"boolean\" && clickShouldContinue === false || (event == null ? void 0 : event.defaultPrevented)) return;\n    }\n    defaultOnClick == null ? void 0 : defaultOnClick(event);\n  }, [defaultOnClick, onClick]);\n  const Component = as || \"button\";\n  return /* @__PURE__ */jsx(Component, {\n    ref: buttonRef,\n    onClick: handleOnClick,\n    ...passthroughProps,\n    children\n  });\n}\nexport { BaseButton };","map":{"version":3,"names":["BaseButton","props","as","onClick","defaultOnClick","children","buttonRef","passthroughProps","handleOnClick","useCallback","event","clickShouldContinue","defaultPrevented","Component","jsx","ref"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/BaseButton.tsx"],"sourcesContent":["import {ReactNode, Ref, useCallback} from 'react';\n\nexport interface CustomBaseButtonProps<AsType> {\n  /** Provide a React element or component to render as the underlying button. Note: for accessibility compliance, almost always you should use a `button` element, or a component that renders an underlying button. */\n  as?: AsType;\n  /** Any ReactNode elements. */\n  children: ReactNode;\n  /** Click event handler. Default behaviour triggers unless prevented */\n  onClick?: (\n    event?: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => void | boolean;\n  /** A default `onClick` behavior */\n  defaultOnClick?: (\n    event?: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => void | boolean;\n  /** A `ref` to the underlying button */\n  buttonRef?: Ref<HTMLButtonElement>;\n}\n\nexport type BaseButtonProps<AsType extends React.ElementType> =\n  CustomBaseButtonProps<AsType> &\n    Omit<\n      React.ComponentPropsWithoutRef<AsType>,\n      keyof CustomBaseButtonProps<AsType>\n    >;\n\nexport function BaseButton<AsType extends React.ElementType = 'button'>(\n  props: BaseButtonProps<AsType>,\n): JSX.Element {\n  const {\n    as,\n    onClick,\n    defaultOnClick,\n    children,\n    buttonRef,\n    ...passthroughProps\n  } = props;\n\n  const handleOnClick = useCallback(\n    (event?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      if (onClick) {\n        const clickShouldContinue = onClick(event);\n        if (\n          (typeof clickShouldContinue === 'boolean' &&\n            clickShouldContinue === false) ||\n          event?.defaultPrevented\n        )\n          return;\n      }\n\n      defaultOnClick?.(event);\n    },\n    [defaultOnClick, onClick],\n  );\n\n  const Component = as || 'button';\n\n  return (\n    <Component ref={buttonRef} onClick={handleOnClick} {...passthroughProps}>\n      {children}\n    </Component>\n  );\n}\n"],"mappings":";;AA0BO,SAASA,WACdC,KAAA,EACa;EACP;IACJC,EAAA;IACAC,OAAA;IACAC,cAAA;IACAC,QAAA;IACAC,SAAA;IACA,GAAGC;EACD,IAAAN,KAAA;EAEJ,MAAMO,aAAA,GAAgBC,WAAA,CACnBC,KAAA,IAA4D;IAC3D,IAAIP,OAAA,EAAS;MACL,MAAAQ,mBAAA,GAAsBR,OAAA,CAAQO,KAAK;MACzC,IACG,OAAOC,mBAAA,KAAwB,aAC9BA,mBAAA,KAAwB,UAC1BD,KAAA,oBAAAA,KAAA,CAAOE,gBAAA,GAEP;IACJ;IAEAR,cAAA,oBAAAA,cAAA,CAAiBM,KAAA;EACnB,GACA,CAACN,cAAA,EAAgBD,OAAO;EAG1B,MAAMU,SAAA,GAAYX,EAAA,IAAM;EAGtB,sBAAAY,GAAA,CAACD,SAAA;IAAUE,GAAA,EAAKT,SAAA;IAAWH,OAAA,EAASK,aAAA;IAAgB,GAAGD,gBAAA;IACpDF;EACH;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}