{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\n\n// The default allowed delta for keyframe distance\nvar keyframeDistance = 10;\nvar defaultNormalizedFrames = {\n  'from': 'from',\n  '0%': 'from',\n  'to': 'to',\n  '100%': 'to'\n};\n\n/**\n * Takes an array of strings representing transform values and\n * merges them. Ignores duplicates and 'none'.\n * @param {Array} transforms Array<string>\n * @returns {String} merged\n * @private\n * @example\n * mergeTransforms([\n *   'translateX(10px)',\n *   'rotateX(120deg)',\n *   'translateX(10px)',\n *   'none',\n * ])\n * // -> 'translateX(10px) rotateX(120deg)'\n *\n */\nvar mergeTransforms = function mergeTransforms(transforms) {\n  var filtered = transforms.filter(function (transform, i) {\n    return transform !== 'none' && transforms.indexOf(transform) === i;\n  });\n  return filtered.join(' ');\n};\n\n/**\n * Returns whichever value is actually defined\n * @param {String|Number} primary CSSValue\n * @param {String|Number} secondary CSSValue\n * @returns {String|Number} defined CSSValue\n * @private\n */\nvar getDefined = function getDefined(primary, secondary) {\n  return typeof primary !== 'undefined' ? primary : secondary;\n};\n\n/**\n * Takes a source animation and the current cache, populating the\n * cache with the normalized keyframes and returning a copy of the\n * source animation with the normalized keyframes as well.\n *\n * It uses keyframeDistance to determine how much it should normalize\n * frames.\n * @param {Object} source Animation\n * @param {Object} cache FrameMap\n * @returns {Object} Animation\n * @private\n */\nvar normalizeFrames = function normalizeFrames(source, cache) {\n  var normalized = {};\n  for (var frame in source) {\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\n    normalized[normalizedFrame] = source[frame];\n    cache[normalizedFrame] = normalizedFrame;\n  }\n  return normalized;\n};\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\n  // Walk through all properties in the primary frame\n  for (var propertyName in primaryFrame) {\n    // Transform is special cased, as we want to combine both\n    // transforms when posssible.\n    if (propertyName === 'transform') {\n      // But we dont need to do anything if theres no other\n      // transform to merge.\n      if (secondaryFrame[propertyName]) {\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]);\n        // We make the assumption that animations use 'transform: none'\n        // to terminate the keyframe. If we're combining two animations\n        // that may terminate at separte frames, its safest to just\n        // ignore this.\n        if (newTransform !== 'none') {\n          target[propertyName] = newTransform;\n        }\n      } else {\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n        target[propertyName] = propertyValue;\n      }\n    } else {\n      // Use a typeof check so we don't ignore falsy values like 0.\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n      target[propertyName] = _propertyValue;\n    }\n  }\n  // Walk through all properties in the secondary frame.\n  // We should be able to assume that any property that\n  // needed to be merged has already been merged when we\n  // walked the primary frame.\n  for (var _propertyName in secondaryFrame) {\n    var _propertyValue2 = secondaryFrame[_propertyName];\n    // Again, ignore 'transform: none'\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\n      continue;\n    }\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\n  }\n};\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\n  var definedFrame = primaryFrame || secondaryFrame;\n  var target = {};\n  for (var propertyName in definedFrame) {\n    var propertyValue = definedFrame[propertyName];\n    // Again, ignore 'transform: none'\n    if (propertyName === 'transform' && propertyValue === 'none') {\n      continue;\n    }\n    target[propertyName] = propertyValue;\n  }\n  // Only define a frame if there are actual styles to apply\n  if (Object.keys(target).length) {\n    return target;\n  }\n  return null;\n};\n\n/**\n * Merge lets you take two Animations and merge them together. It\n * iterates through each animation and merges each keyframe. It\n * special cases the `transform` property and uses string interop.\n * to merge the two transforms.\n *\n * This is *at your own risk* and will not work with animations\n * that are clearly opposites (fadeIn and fadeOut).\n *\n * @param {Object} primary Animation\n * @param {Object} secondary Animation\n * @returns {Object} merged Animation\n * @example\n * import { merge, tada, flip } from 'react-animations';\n * const tadaFlip = merge(tada, flip);\n */\nfunction merge(primary, secondary) {\n  // A map used to track the normalized frame value in cases where\n  // two animations contain frames that appear closely, but not exactly\n  var normalizedFrames = {};\n\n  // We merge each frame into a new object and return it\n  var merged = {};\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames);\n\n  // Iterate all normalized frames\n  for (var frame in normalizedFrames) {\n    var primaryFrame = normalizedPrimary[frame];\n    var secondaryFrame = normalizedSecondary[frame];\n    // Create a new frame object if it doesn't exist.\n    var target = merged[frame] || (merged[frame] = {});\n\n    // If both aniatmions define this frame, merge them carefully\n    if (primaryFrame && secondaryFrame) {\n      mergeFrames(primaryFrame, secondaryFrame, target);\n    } else {\n      // Otherwise find the defined frime and populate all properties\\\n      // except for \"transform\" when the value is none.\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\n      if (keyframe) {\n        merged[frame] = keyframe;\n      }\n    }\n  }\n  return merged;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","merge","keyframeDistance","defaultNormalizedFrames","mergeTransforms","transforms","filtered","filter","transform","i","indexOf","join","getDefined","primary","secondary","normalizeFrames","source","cache","normalized","frame","normalizedFrame","Math","round","parseFloat","mergeFrames","primaryFrame","secondaryFrame","target","propertyName","newTransform","propertyValue","_propertyValue","_propertyName","_propertyValue2","populateDefinedFrame","definedFrame","keys","length","normalizedFrames","merged","normalizedPrimary","normalizedSecondary","keyframe"],"sources":["/home/martin/Desktop/Project/Afrithings/afrithings/node_modules/react-animations/lib/merge.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\n\n\n// The default allowed delta for keyframe distance\nvar keyframeDistance = 10;\n\nvar defaultNormalizedFrames = {\n  'from': 'from',\n  '0%': 'from',\n  'to': 'to',\n  '100%': 'to'\n};\n\n/**\n * Takes an array of strings representing transform values and\n * merges them. Ignores duplicates and 'none'.\n * @param {Array} transforms Array<string>\n * @returns {String} merged\n * @private\n * @example\n * mergeTransforms([\n *   'translateX(10px)',\n *   'rotateX(120deg)',\n *   'translateX(10px)',\n *   'none',\n * ])\n * // -> 'translateX(10px) rotateX(120deg)'\n *\n */\nvar mergeTransforms = function mergeTransforms(transforms) {\n  var filtered = transforms.filter(function (transform, i) {\n    return transform !== 'none' && transforms.indexOf(transform) === i;\n  });\n  return filtered.join(' ');\n};\n\n/**\n * Returns whichever value is actually defined\n * @param {String|Number} primary CSSValue\n * @param {String|Number} secondary CSSValue\n * @returns {String|Number} defined CSSValue\n * @private\n */\nvar getDefined = function getDefined(primary, secondary) {\n  return typeof primary !== 'undefined' ? primary : secondary;\n};\n\n/**\n * Takes a source animation and the current cache, populating the\n * cache with the normalized keyframes and returning a copy of the\n * source animation with the normalized keyframes as well.\n *\n * It uses keyframeDistance to determine how much it should normalize\n * frames.\n * @param {Object} source Animation\n * @param {Object} cache FrameMap\n * @returns {Object} Animation\n * @private\n */\nvar normalizeFrames = function normalizeFrames(source, cache) {\n  var normalized = {};\n  for (var frame in source) {\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\n    normalized[normalizedFrame] = source[frame];\n    cache[normalizedFrame] = normalizedFrame;\n  }\n  return normalized;\n};\n\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\n  // Walk through all properties in the primary frame\n  for (var propertyName in primaryFrame) {\n    // Transform is special cased, as we want to combine both\n    // transforms when posssible.\n    if (propertyName === 'transform') {\n      // But we dont need to do anything if theres no other\n      // transform to merge.\n      if (secondaryFrame[propertyName]) {\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]);\n        // We make the assumption that animations use 'transform: none'\n        // to terminate the keyframe. If we're combining two animations\n        // that may terminate at separte frames, its safest to just\n        // ignore this.\n        if (newTransform !== 'none') {\n          target[propertyName] = newTransform;\n        }\n      } else {\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n        target[propertyName] = propertyValue;\n      }\n    } else {\n      // Use a typeof check so we don't ignore falsy values like 0.\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n      target[propertyName] = _propertyValue;\n    }\n  }\n  // Walk through all properties in the secondary frame.\n  // We should be able to assume that any property that\n  // needed to be merged has already been merged when we\n  // walked the primary frame.\n  for (var _propertyName in secondaryFrame) {\n    var _propertyValue2 = secondaryFrame[_propertyName];\n    // Again, ignore 'transform: none'\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\n      continue;\n    }\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\n  }\n};\n\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\n  var definedFrame = primaryFrame || secondaryFrame;\n  var target = {};\n  for (var propertyName in definedFrame) {\n    var propertyValue = definedFrame[propertyName];\n    // Again, ignore 'transform: none'\n    if (propertyName === 'transform' && propertyValue === 'none') {\n      continue;\n    }\n    target[propertyName] = propertyValue;\n  }\n  // Only define a frame if there are actual styles to apply\n  if (Object.keys(target).length) {\n    return target;\n  }\n  return null;\n};\n\n/**\n * Merge lets you take two Animations and merge them together. It\n * iterates through each animation and merges each keyframe. It\n * special cases the `transform` property and uses string interop.\n * to merge the two transforms.\n *\n * This is *at your own risk* and will not work with animations\n * that are clearly opposites (fadeIn and fadeOut).\n *\n * @param {Object} primary Animation\n * @param {Object} secondary Animation\n * @returns {Object} merged Animation\n * @example\n * import { merge, tada, flip } from 'react-animations';\n * const tadaFlip = merge(tada, flip);\n */\nfunction merge(primary, secondary) {\n  // A map used to track the normalized frame value in cases where\n  // two animations contain frames that appear closely, but not exactly\n  var normalizedFrames = {};\n\n  // We merge each frame into a new object and return it\n  var merged = {};\n\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\n\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames);\n\n  // Iterate all normalized frames\n  for (var frame in normalizedFrames) {\n    var primaryFrame = normalizedPrimary[frame];\n    var secondaryFrame = normalizedSecondary[frame];\n    // Create a new frame object if it doesn't exist.\n    var target = merged[frame] || (merged[frame] = {});\n\n    // If both aniatmions define this frame, merge them carefully\n    if (primaryFrame && secondaryFrame) {\n      mergeFrames(primaryFrame, secondaryFrame, target);\n    } else {\n      // Otherwise find the defined frime and populate all properties\\\n      // except for \"transform\" when the value is none.\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\n      if (keyframe) {\n        merged[frame] = keyframe;\n      }\n    }\n  }\n  return merged;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}