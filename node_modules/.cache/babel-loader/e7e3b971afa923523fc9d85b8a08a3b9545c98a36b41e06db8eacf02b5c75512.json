{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { Image } from \"./Image.mjs\";\nimport { Video } from \"./Video.mjs\";\nimport { ExternalVideo } from \"./ExternalVideo.mjs\";\nimport { ModelViewer } from \"./ModelViewer.mjs\";\nfunction MediaFile(_ref) {\n  let {\n    data,\n    mediaOptions,\n    ...passthroughProps\n  } = _ref;\n  switch (data.__typename) {\n    case \"MediaImage\":\n      {\n        if (!data.image) {\n          const noDataImage = `<MediaFile/>: 'data.image' does not exist for __typename of 'MediaImage'; rendering 'null' by default.`;\n          {\n            throw new Error(noDataImage);\n          }\n        }\n        return /* @__PURE__ */jsx(Image, {\n          ...passthroughProps,\n          ...(mediaOptions == null ? void 0 : mediaOptions.image),\n          data: data.image\n        });\n      }\n    case \"Video\":\n      {\n        return /* @__PURE__ */jsx(Video, {\n          ...passthroughProps,\n          ...(mediaOptions == null ? void 0 : mediaOptions.video),\n          data\n        });\n      }\n    case \"ExternalVideo\":\n      {\n        return /* @__PURE__ */jsx(ExternalVideo, {\n          ...passthroughProps,\n          ...(mediaOptions == null ? void 0 : mediaOptions.externalVideo),\n          data\n        });\n      }\n    case \"Model3d\":\n      {\n        return (\n          // @ts-expect-error There are issues with the inferred HTML attribute types here for ModelViewer (and contentEditable), but I think that's a little bit beyond me at the moment\n          /* @__PURE__ */\n          jsx(ModelViewer, {\n            ...passthroughProps,\n            ...(mediaOptions == null ? void 0 : mediaOptions.modelViewer),\n            data\n          })\n        );\n      }\n    default:\n      {\n        const typenameMissingMessage = `<MediaFile /> requires the '__typename' property to exist on the 'data' prop in order to render the matching sub-component for this type of media.`;\n        {\n          throw new Error(typenameMissingMessage);\n        }\n      }\n  }\n}\nexport { MediaFile };","map":{"version":3,"names":["MediaFile","_ref","data","mediaOptions","passthroughProps","__typename","image","noDataImage","Error","jsx","Image","Video","video","ExternalVideo","externalVideo","ModelViewer","modelViewer","typenameMissingMessage"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/MediaFile.tsx"],"sourcesContent":["import {Image, type HydrogenImageProps} from './Image.js';\nimport {Video} from './Video.js';\nimport {ExternalVideo} from './ExternalVideo.js';\nimport {ModelViewer} from './ModelViewer.js';\nimport type {MediaEdge as MediaEdgeType} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\nimport type {ModelViewerElement} from '@google/model-viewer/lib/model-viewer.js';\n\ntype BaseProps = React.HTMLAttributes<\n  HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | ModelViewerElement\n>;\nexport interface MediaFileProps extends BaseProps {\n  /** An object with fields that correspond to the Storefront API's [Media object](https://shopify.dev/api/storefront/reference/products/media). */\n  data: PartialDeep<MediaEdgeType['node'], {recurseIntoArrays: true}>;\n  /** The options for the `Image`, `Video`, `ExternalVideo`, or `ModelViewer` components. */\n  mediaOptions?: MediaOptions;\n}\n\ntype MediaOptions = {\n  /** Props that will only apply when an `<Image />` is rendered */\n  image?: Omit<HydrogenImageProps, 'data'>;\n  /** Props that will only apply when a `<Video />` is rendered */\n  video?: Omit<React.ComponentProps<typeof Video>, 'data'>;\n  /** Props that will only apply when an `<ExternalVideo />` is rendered */\n  externalVideo?: Omit<\n    React.ComponentProps<typeof ExternalVideo>['options'],\n    'data'\n  >;\n  /** Props that will only apply when a `<ModelViewer />` is rendered */\n  modelViewer?: Omit<typeof ModelViewer, 'data'>;\n};\n\n/**\n * The `MediaFile` component renders the media for the Storefront API's\n * [Media object](https://shopify.dev/api/storefront/reference/products/media). It renders an `Image`, a\n * `Video`, an `ExternalVideo`, or a `ModelViewer` depending on the `__typename` of the `data` prop.\n */\nexport function MediaFile({\n  data,\n  mediaOptions,\n  ...passthroughProps\n}: MediaFileProps): JSX.Element | null {\n  switch (data.__typename) {\n    case 'MediaImage': {\n      if (!data.image) {\n        const noDataImage = `<MediaFile/>: 'data.image' does not exist for __typename of 'MediaImage'; rendering 'null' by default.`;\n        if (__HYDROGEN_DEV__) {\n          throw new Error(noDataImage);\n        } else {\n          console.warn(noDataImage);\n          return null;\n        }\n      }\n\n      return (\n        <Image\n          {...passthroughProps}\n          {...mediaOptions?.image}\n          data={data.image}\n        />\n      );\n    }\n    case 'Video': {\n      return (\n        <Video {...passthroughProps} {...mediaOptions?.video} data={data} />\n      );\n    }\n    case 'ExternalVideo': {\n      return (\n        <ExternalVideo\n          {...passthroughProps}\n          {...mediaOptions?.externalVideo}\n          data={data}\n        />\n      );\n    }\n    case 'Model3d': {\n      return (\n        // @ts-expect-error There are issues with the inferred HTML attribute types here for ModelViewer (and contentEditable), but I think that's a little bit beyond me at the moment\n        <ModelViewer\n          {...passthroughProps}\n          {...mediaOptions?.modelViewer}\n          data={data}\n        />\n      );\n    }\n    default: {\n      const typenameMissingMessage = `<MediaFile /> requires the '__typename' property to exist on the 'data' prop in order to render the matching sub-component for this type of media.`;\n      if (__HYDROGEN_DEV__) {\n        throw new Error(typenameMissingMessage);\n      } else {\n        console.error(`${typenameMissingMessage}  Rendering 'null' by default`);\n        return null;\n      }\n    }\n  }\n}\n"],"mappings":";;;;;AAqCO,SAASA,UAAAC,IAAA,EAIuB;EAAA,IAJb;IACxBC,IAAA;IACAC,YAAA;IACA,GAAGC;EACL,IAAAH,IAAA;EACE,QAAQC,IAAA,CAAKG,UAAA;IACX,KAAK;MAAc;QACb,KAACH,IAAA,CAAKI,KAAA,EAAO;UACf,MAAMC,WAAA,GAAc;UACE;YACd,UAAIC,KAAA,CAAMD,WAAW;UAI7B;QACF;QAGE,sBAAAE,GAAA,CAACC,KAAA;UACE,GAAGN,gBAAA;UACH,IAAGD,YAAA,oBAAAA,YAAA,CAAcG,KAAA;UAClBJ,IAAA,EAAMA,IAAA,CAAKI;QAAA;MAGjB;IACA,KAAK;MAAS;QACZ,sBAAAG,GAAA,CACGE,KAAA,EAAO;UAAA,GAAGP,gBAAA;UAAmB,IAAGD,YAAA,oBAAAA,YAAA,CAAcS,KAAA;UAAOV;QAAY;MAEtE;IACA,KAAK;MAAiB;QAElB,sBAAAO,GAAA,CAACI,aAAA;UACE,GAAGT,gBAAA;UACH,IAAGD,YAAA,oBAAAA,YAAA,CAAcW,aAAA;UAClBZ;QAAA;MAGN;IACA,KAAK;MAAW;QACd;UAAA;UAEE;UAAAO,GAAA,CAACM,WAAA;YACE,GAAGX,gBAAA;YACH,IAAGD,YAAA,oBAAAA,YAAA,CAAca,WAAA;YAClBd;UAAA,CACF;QAAA;MAEJ;IACA;MAAS;QACP,MAAMe,sBAAA,GAAyB;QACT;UACd,UAAIT,KAAA,CAAMS,sBAAsB;QAIxC;MACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}