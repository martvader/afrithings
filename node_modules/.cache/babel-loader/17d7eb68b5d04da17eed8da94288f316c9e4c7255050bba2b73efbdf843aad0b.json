{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nfunction ExternalVideo(props) {\n  const {\n    data,\n    options,\n    id = data.id,\n    frameBorder = \"0\",\n    allow = \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen = true,\n    loading = \"lazy\",\n    ...passthroughProps\n  } = props;\n  if (!data.embedUrl) {\n    throw new Error(`<ExternalVideo/> requires the 'embedUrl' property`);\n  }\n  let finalUrl = data.embedUrl;\n  if (options) {\n    const urlObject = new URL(data.embedUrl);\n    for (const key of Object.keys(options)) {\n      urlObject.searchParams.set(key, options[key]);\n    }\n    finalUrl = urlObject.toString();\n  }\n  return /* @__PURE__ */jsx(\"iframe\", {\n    ...passthroughProps,\n    id: id ?? data.embedUrl,\n    title: data.alt ?? data.id ?? \"external video\",\n    frameBorder,\n    allow,\n    allowFullScreen,\n    src: finalUrl,\n    loading\n  });\n}\nexport { ExternalVideo };","map":{"version":3,"names":["ExternalVideo","props","data","options","id","frameBorder","allow","allowFullScreen","loading","passthroughProps","embedUrl","Error","finalUrl","urlObject","URL","key","Object","keys","searchParams","set","toString","jsx","title","alt","src"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/ExternalVideo.tsx"],"sourcesContent":["import type {ExternalVideo as ExternalVideoType} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\n\ninterface ExternalVideoBaseProps {\n  /**\n   * An object with fields that correspond to the Storefront API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).\n   */\n  data: PartialDeep<ExternalVideoType, {recurseIntoArrays: true}>;\n  /** An object containing the options available for either\n   * [YouTube](https://developers.google.com/youtube/player_parameters#Parameters) or\n   * [Vimeo](https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters).\n   */\n  options?: YouTube | Vimeo;\n}\n\nexport type ExternalVideoProps = Omit<JSX.IntrinsicElements['iframe'], 'src'> &\n  ExternalVideoBaseProps;\n\n/**\n * The `ExternalVideo` component renders an embedded video for the Storefront\n * API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).\n */\nexport function ExternalVideo(props: ExternalVideoProps): JSX.Element {\n  const {\n    data,\n    options,\n    id = data.id,\n    frameBorder = '0',\n    allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture',\n    allowFullScreen = true,\n    loading = 'lazy',\n    ...passthroughProps\n  } = props;\n\n  if (!data.embedUrl) {\n    throw new Error(`<ExternalVideo/> requires the 'embedUrl' property`);\n  }\n\n  let finalUrl: string = data.embedUrl;\n\n  if (options) {\n    const urlObject = new URL(data.embedUrl);\n    for (const key of Object.keys(options) as (keyof typeof options)[]) {\n      // @ts-expect-error https://github.com/microsoft/TypeScript/issues/32951\n      urlObject.searchParams.set(key, options[key]);\n    }\n    finalUrl = urlObject.toString();\n  }\n\n  return (\n    <iframe\n      {...passthroughProps}\n      id={id ?? data.embedUrl}\n      title={data.alt ?? data.id ?? 'external video'}\n      frameBorder={frameBorder}\n      allow={allow}\n      allowFullScreen={allowFullScreen}\n      src={finalUrl}\n      loading={loading}\n    ></iframe>\n  );\n}\n\ninterface YouTube {\n  autoplay?: 0 | 1;\n  cc_lang_pref?: string;\n  cc_load_policy?: 1;\n  color?: 'red' | 'white';\n  controls?: 0 | 1;\n  disablekb?: 0 | 1;\n  enablejsapi?: 0 | 1;\n  end?: number;\n  fs?: 0 | 1;\n  hl?: string;\n  iv_load_policy?: 1 | 3;\n  list?: string;\n  list_type?: 'playlist' | 'user_uploads';\n  loop?: 0 | 1;\n  modest_branding?: 1;\n  origin?: string;\n  playlist?: string;\n  plays_inline?: 0 | 1;\n  rel?: 0 | 1;\n  start?: number;\n  widget_referrer?: string;\n}\n\ntype VimeoBoolean = 0 | 1 | boolean;\n\ninterface Vimeo {\n  autopause?: VimeoBoolean;\n  autoplay?: VimeoBoolean;\n  background?: VimeoBoolean;\n  byline?: VimeoBoolean;\n  color?: string;\n  controls?: VimeoBoolean;\n  dnt?: VimeoBoolean;\n  loop?: VimeoBoolean;\n  muted?: VimeoBoolean;\n  pip?: VimeoBoolean;\n  playsinline?: VimeoBoolean;\n  portrait?: VimeoBoolean;\n  quality?: '240p' | '360p' | '540p' | '720p' | '1080p' | '2k' | '4k';\n  speed?: VimeoBoolean;\n  '#t'?: string;\n  texttrack?: string;\n  title?: VimeoBoolean;\n  transparent?: VimeoBoolean;\n}\n"],"mappings":";AAsBO,SAASA,cAAcC,KAAA,EAAwC;EAC9D;IACJC,IAAA;IACAC,OAAA;IACAC,EAAA,GAAKF,IAAA,CAAKE,EAAA;IACVC,WAAA,GAAc;IACdC,KAAA,GAAQ;IACRC,eAAA,GAAkB;IAClBC,OAAA,GAAU;IACV,GAAGC;EACD,IAAAR,KAAA;EAEA,KAACC,IAAA,CAAKQ,QAAA,EAAU;IACZ,UAAIC,KAAA,CAAM,mDAAmD;EACrE;EAEA,IAAIC,QAAA,GAAmBV,IAAA,CAAKQ,QAAA;EAE5B,IAAIP,OAAA,EAAS;IACX,MAAMU,SAAA,GAAY,IAAIC,GAAA,CAAIZ,IAAA,CAAKQ,QAAQ;IACvC,WAAWK,GAAA,IAAOC,MAAA,CAAOC,IAAA,CAAKd,OAAO,GAA+B;MAElEU,SAAA,CAAUK,YAAA,CAAaC,GAAA,CAAIJ,GAAA,EAAKZ,OAAA,CAAQY,GAAG,CAAC;IAC9C;IACAH,QAAA,GAAWC,SAAA,CAAUO,QAAA;EACvB;EAGE,sBAAAC,GAAA,CAAC;IACE,GAAGZ,gBAAA;IACJL,EAAA,EAAIA,EAAA,IAAMF,IAAA,CAAKQ,QAAA;IACfY,KAAA,EAAOpB,IAAA,CAAKqB,GAAA,IAAOrB,IAAA,CAAKE,EAAA,IAAM;IAC9BC,WAAA;IACAC,KAAA;IACAC,eAAA;IACAiB,GAAA,EAAKZ,QAAA;IACLJ;EAAA;AAGN"},"metadata":{},"sourceType":"module","externalDependencies":[]}