{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { createContext, useMemo, useContext } from \"react\";\nimport { SFAPI_VERSION } from \"./storefront-api-constants.mjs\";\nimport { getPublicTokenHeadersRaw } from \"./storefront-client.mjs\";\nconst defaultShopifyContext = {\n  storeDomain: \"test\",\n  storefrontToken: \"abc123\",\n  storefrontApiVersion: SFAPI_VERSION,\n  countryIsoCode: \"US\",\n  languageIsoCode: \"EN\",\n  getStorefrontApiUrl() {\n    return \"\";\n  },\n  getPublicTokenHeaders() {\n    return {};\n  },\n  getShopifyDomain() {\n    return \"\";\n  }\n};\nconst ShopifyContext = createContext(defaultShopifyContext);\nfunction ShopifyProvider(_ref) {\n  let {\n    children,\n    ...shopifyConfig\n  } = _ref;\n  if (!shopifyConfig.countryIsoCode || !shopifyConfig.languageIsoCode || !shopifyConfig.storeDomain || !shopifyConfig.storefrontToken || !shopifyConfig.storefrontApiVersion) {\n    throw new Error(`Please provide the necessary props to '<ShopifyProvider/>'`);\n  }\n  if (shopifyConfig.storefrontApiVersion !== SFAPI_VERSION) {\n    console.warn(`<ShopifyProvider/>: This version of Hydrogen React is built for Shopify's Storefront API version ${SFAPI_VERSION}, but it looks like you're using version ${shopifyConfig.storefrontApiVersion}. There may be issues or bugs if you use a mismatched version of Hydrogen React and the Storefront API.`);\n  }\n  const finalConfig = useMemo(() => {\n    function getShopifyDomain(overrideProps) {\n      return (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? shopifyConfig.storeDomain;\n    }\n    return {\n      ...shopifyConfig,\n      getPublicTokenHeaders(overrideProps) {\n        return getPublicTokenHeadersRaw(overrideProps.contentType, shopifyConfig.storefrontApiVersion, overrideProps.storefrontToken ?? shopifyConfig.storefrontToken);\n      },\n      getShopifyDomain,\n      getStorefrontApiUrl(overrideProps) {\n        const finalDomainUrl = getShopifyDomain({\n          storeDomain: (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? shopifyConfig.storeDomain\n        });\n        return `${finalDomainUrl}${finalDomainUrl.endsWith(\"/\") ? \"\" : \"/\"}api/${(overrideProps == null ? void 0 : overrideProps.storefrontApiVersion) ?? shopifyConfig.storefrontApiVersion}/graphql.json`;\n      }\n    };\n  }, [shopifyConfig]);\n  return /* @__PURE__ */jsx(ShopifyContext.Provider, {\n    value: finalConfig,\n    children\n  });\n}\nfunction useShop() {\n  const shopContext = useContext(ShopifyContext);\n  if (!shopContext) {\n    throw new Error(`'useShop()' must be a descendent of <ShopifyProvider/>`);\n  }\n  return shopContext;\n}\nexport { ShopifyProvider, defaultShopifyContext, useShop };","map":{"version":3,"names":["defaultShopifyContext","storeDomain","storefrontToken","storefrontApiVersion","SFAPI_VERSION","countryIsoCode","languageIsoCode","getStorefrontApiUrl","getPublicTokenHeaders","getShopifyDomain","ShopifyContext","createContext","ShopifyProvider","_ref","children","shopifyConfig","Error","console","warn","finalConfig","useMemo","overrideProps","getPublicTokenHeadersRaw","contentType","finalDomainUrl","endsWith","jsx","Provider","value","useShop","shopContext","useContext"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/ShopifyProvider.tsx"],"sourcesContent":["import {createContext, useContext, useMemo, type ReactNode} from 'react';\nimport type {LanguageCode, CountryCode} from './storefront-api-types.js';\nimport {SFAPI_VERSION} from './storefront-api-constants.js';\nimport {getPublicTokenHeadersRaw} from './storefront-client.js';\n\nexport const defaultShopifyContext: ShopifyContextValue = {\n  storeDomain: 'test',\n  storefrontToken: 'abc123',\n  storefrontApiVersion: SFAPI_VERSION,\n  countryIsoCode: 'US',\n  languageIsoCode: 'EN',\n  getStorefrontApiUrl() {\n    return '';\n  },\n  getPublicTokenHeaders() {\n    return {};\n  },\n  getShopifyDomain() {\n    return '';\n  },\n};\n\nconst ShopifyContext = createContext<ShopifyContextValue>(\n  defaultShopifyContext,\n);\n\n/**\n * The `<ShopifyProvider/>` component enables use of the `useShop()` hook. The component should wrap your app.\n */\nexport function ShopifyProvider({\n  children,\n  ...shopifyConfig\n}: ShopifyProviderProps): JSX.Element {\n  if (\n    !shopifyConfig.countryIsoCode ||\n    !shopifyConfig.languageIsoCode ||\n    !shopifyConfig.storeDomain ||\n    !shopifyConfig.storefrontToken ||\n    !shopifyConfig.storefrontApiVersion\n  ) {\n    throw new Error(\n      `Please provide the necessary props to '<ShopifyProvider/>'`,\n    );\n  }\n\n  if (shopifyConfig.storefrontApiVersion !== SFAPI_VERSION) {\n    console.warn(\n      `<ShopifyProvider/>: This version of Hydrogen React is built for Shopify's Storefront API version ${SFAPI_VERSION}, but it looks like you're using version ${shopifyConfig.storefrontApiVersion}. There may be issues or bugs if you use a mismatched version of Hydrogen React and the Storefront API.`,\n    );\n  }\n\n  const finalConfig = useMemo<ShopifyContextValue>(() => {\n    function getShopifyDomain(overrideProps?: {storeDomain?: string}): string {\n      return overrideProps?.storeDomain ?? shopifyConfig.storeDomain;\n    }\n\n    return {\n      ...shopifyConfig,\n      getPublicTokenHeaders(overrideProps): Record<string, string> {\n        return getPublicTokenHeadersRaw(\n          overrideProps.contentType,\n          shopifyConfig.storefrontApiVersion,\n          overrideProps.storefrontToken ?? shopifyConfig.storefrontToken,\n        );\n      },\n      getShopifyDomain,\n      getStorefrontApiUrl(overrideProps): string {\n        const finalDomainUrl = getShopifyDomain({\n          storeDomain: overrideProps?.storeDomain ?? shopifyConfig.storeDomain,\n        });\n        return `${finalDomainUrl}${\n          finalDomainUrl.endsWith('/') ? '' : '/'\n        }api/${\n          overrideProps?.storefrontApiVersion ??\n          shopifyConfig.storefrontApiVersion\n        }/graphql.json`;\n      },\n    };\n  }, [shopifyConfig]);\n\n  return (\n    <ShopifyContext.Provider value={finalConfig}>\n      {children}\n    </ShopifyContext.Provider>\n  );\n}\n\n/**\n * Provides access to the `shopifyConfig` prop of `<ShopifyProvider/>`. Must be a descendent of `<ShopifyProvider/>`.\n */\nexport function useShop(): ShopifyContextValue {\n  const shopContext = useContext(ShopifyContext);\n  if (!shopContext) {\n    throw new Error(`'useShop()' must be a descendent of <ShopifyProvider/>`);\n  }\n  return shopContext;\n}\n\nexport interface ShopifyProviderBase {\n  /** The globally-unique identifier for the Shop */\n  storefrontId?: string;\n  /** The full domain of your Shopify storefront URL (eg: the complete string of `{subdomain}.myshopify.com`). */\n  storeDomain: string;\n  /** The Storefront API public access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details. */\n  storefrontToken: string;\n  /** The Storefront API version. This should almost always be the same as the version Hydrogen React was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details.  */\n  storefrontApiVersion: string;\n  /**\n   * The code designating a country, which generally follows ISO 3166-1 alpha-2 guidelines. If a territory doesn't have a country code value in the `CountryCode` enum, it might be considered a subdivision of another country. For example, the territories associated with Spain are represented by the country code `ES`, and the territories associated with the United States of America are represented by the country code `US`.\n   */\n  countryIsoCode: CountryCode;\n  /**\n   * `ISO 369` language codes supported by Shopify.\n   */\n  languageIsoCode: LanguageCode;\n}\n\n/**\n * Shopify-specific values that are used in various Hydrogen React components and hooks.\n */\nexport interface ShopifyProviderProps extends ShopifyProviderBase {\n  /** React children to render. */\n  children?: ReactNode;\n}\n\nexport interface ShopifyContextValue\n  extends ShopifyProviderBase,\n    ShopifyContextReturn {}\n\ntype ShopifyContextReturn = {\n  /**\n   * Creates the fully-qualified URL to your store's GraphQL endpoint.\n   *\n   * By default, it will use the config you passed in when creating `<ShopifyProvider/>`. However, you can override the following settings on each invocation of `getStorefrontApiUrl({...})`:\n   *\n   * - `storeDomain`\n   * - `storefrontApiVersion`\n   */\n  getStorefrontApiUrl: (props?: GetStorefrontApiUrlProps) => string;\n  /**\n   * Returns an object that contains headers that are needed for each query to Storefront API GraphQL endpoint. This uses the public Storefront API token.\n   *\n   * By default, it will use the config you passed in when creating `<ShopifyProvider/>`. However, you can override the following settings on each invocation of `getPublicTokenHeaders({...})`:\n   *\n   * - `contentType`\n   * - `storefrontToken`\n   *\n   */\n  getPublicTokenHeaders: (\n    props: GetPublicTokenHeadersProps,\n  ) => Record<string, string>;\n  /**\n   * Creates the fully-qualified URL to your myshopify.com domain.\n   *\n   * By default, it will use the config you passed in when calling `<ShopifyProvider/>`. However, you can override the following settings on each invocation of `getShopifyDomain({...})`:\n   *\n   * - `storeDomain`\n   */\n  getShopifyDomain: (props?: GetShopifyDomainProps) => string;\n};\n\ntype GetStorefrontApiUrlProps = {\n  /** The host name of the domain (eg: `{shop}.myshopify.com`). */\n  storeDomain?: string;\n  /** The Storefront API version. This should almost always be the same as the version Hydrogen-UI was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details. */\n  storefrontApiVersion?: string;\n};\n\ntype GetPublicTokenHeadersProps = {\n  /**\n   * Customizes which `\"content-type\"` header is added when using `getPrivateTokenHeaders()` and `getPublicTokenHeaders()`. When fetching with a `JSON.stringify()`-ed `body`, use `\"json\"`. When fetching with a `body` that is a plain string, use `\"graphql\"`. Defaults to `\"json\"`\n   */\n  contentType: 'json' | 'graphql';\n  /** The Storefront API access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details. */\n  storefrontToken?: string;\n};\n\ntype GetShopifyDomainProps = {storeDomain?: string};\n"],"mappings":";;;;AAKO,MAAMA,qBAAA,GAA6C;EACxDC,WAAA,EAAa;EACbC,eAAA,EAAiB;EACjBC,oBAAA,EAAsBC,aAAA;EACtBC,cAAA,EAAgB;EAChBC,eAAA,EAAiB;EACjBC,oBAAA,EAAsB;IACb;EACT;EACAC,sBAAA,EAAwB;IACtB,OAAO;EACT;EACAC,iBAAA,EAAmB;IACV;EACT;AACF;AAEA,MAAMC,cAAA,GAAiBC,aAAA,CACrBX,qBACF;AAKO,SAASY,gBAAAC,IAAA,EAGsB;EAAA,IAHN;IAC9BC,QAAA;IACA,GAAGC;EACL,IAAAF,IAAA;EACE,IACE,CAACE,aAAA,CAAcV,cAAA,IACf,CAACU,aAAA,CAAcT,eAAA,IACf,CAACS,aAAA,CAAcd,WAAA,IACf,CAACc,aAAA,CAAcb,eAAA,IACf,CAACa,aAAA,CAAcZ,oBAAA,EACf;IACA,MAAM,IAAIa,KAAA,CACR;EAEJ;EAEI,IAAAD,aAAA,CAAcZ,oBAAA,KAAyBC,aAAA,EAAe;IAChDa,OAAA,CAAAC,IAAA,CACN,oGAAoGd,aAAA,4CAAyDW,aAAA,CAAcZ,oBAAA;EAE/K;EAEM,MAAAgB,WAAA,GAAcC,OAAA,CAA6B,MAAM;IACrD,SAASX,iBAAiBY,aAAA,EAAgD;MACjE,QAAAA,aAAA,oBAAAA,aAAA,CAAepB,WAAA,KAAec,aAAA,CAAcd,WAAA;IACrD;IAEO;MACL,GAAGc,aAAA;MACHP,sBAAsBa,aAAA,EAAuC;QACpD,OAAAC,wBAAA,CACLD,aAAA,CAAcE,WAAA,EACdR,aAAA,CAAcZ,oBAAA,EACdkB,aAAA,CAAcnB,eAAA,IAAmBa,aAAA,CAAcb,eAAA;MAEnD;MACAO,gBAAA;MACAF,oBAAoBc,aAAA,EAAuB;QACzC,MAAMG,cAAA,GAAiBf,gBAAA,CAAiB;UACtCR,WAAA,GAAaoB,aAAA,oBAAAA,aAAA,CAAepB,WAAA,KAAec,aAAA,CAAcd;QAAA,CAC1D;QACM,UAAGuB,cAAA,GACRA,cAAA,CAAeC,QAAA,CAAS,GAAG,IAAI,KAAK,WAEpCJ,aAAA,oBAAAA,aAAA,CAAelB,oBAAA,KACfY,aAAA,CAAcZ,oBAAA;MAElB;IAAA;EACF,GACC,CAACY,aAAa,CAAC;EAElB,sBAAAW,GAAA,CACGhB,cAAA,CAAeiB,QAAA,EAAf;IAAwBC,KAAA,EAAOT,WAAA;IAC7BL;EACH;AAEJ;AAKO,SAASe,QAAA,EAA+B;EACvC,MAAAC,WAAA,GAAcC,UAAA,CAAWrB,cAAc;EAC7C,IAAI,CAACoB,WAAA,EAAa;IACV,UAAId,KAAA,CAAM,wDAAwD;EAC1E;EACO,OAAAc,WAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}