{"ast":null,"code":"import { jsxs, Fragment, jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useCart } from \"./CartProvider.mjs\";\nimport { useProduct } from \"./ProductProvider.mjs\";\nimport { BaseButton } from \"./BaseButton.mjs\";\nfunction AddToCartButton(props) {\n  const [addingItem, setAddingItem] = useState(false);\n  const {\n    variantId: explicitVariantId,\n    quantity = 1,\n    attributes,\n    sellingPlanId,\n    onClick,\n    children,\n    accessibleAddingToCartLabel,\n    ...passthroughProps\n  } = props;\n  const {\n    status,\n    linesAdd\n  } = useCart();\n  const {\n    selectedVariant\n  } = useProduct();\n  const variantId = explicitVariantId ?? (selectedVariant == null ? void 0 : selectedVariant.id) ?? \"\";\n  const disabled = explicitVariantId === null || variantId === \"\" || selectedVariant === null || addingItem || passthroughProps.disabled;\n  useEffect(() => {\n    if (addingItem && status === \"idle\") {\n      setAddingItem(false);\n    }\n  }, [status, addingItem]);\n  const handleAddItem = useCallback(() => {\n    setAddingItem(true);\n    linesAdd([{\n      quantity,\n      merchandiseId: variantId || \"\",\n      attributes,\n      sellingPlanId\n    }]);\n  }, [linesAdd, quantity, variantId, attributes, sellingPlanId]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(BaseButton, {\n      ...passthroughProps,\n      disabled,\n      onClick,\n      defaultOnClick: handleAddItem,\n      children\n    }), accessibleAddingToCartLabel ? /* @__PURE__ */jsx(\"p\", {\n      style: {\n        position: \"absolute\",\n        width: \"1px\",\n        height: \"1px\",\n        padding: \"0\",\n        margin: \"-1px\",\n        overflow: \"hidden\",\n        clip: \"rect(0, 0, 0, 0)\",\n        whiteSpace: \"nowrap\",\n        borderWidth: \"0\"\n      },\n      role: \"alert\",\n      \"aria-live\": \"assertive\",\n      children: addingItem ? accessibleAddingToCartLabel : null\n    }) : null]\n  });\n}\nexport { AddToCartButton };","map":{"version":3,"names":["AddToCartButton","props","addingItem","setAddingItem","useState","variantId","explicitVariantId","quantity","attributes","sellingPlanId","onClick","children","accessibleAddingToCartLabel","passthroughProps","status","linesAdd","useCart","selectedVariant","useProduct","id","disabled","useEffect","handleAddItem","useCallback","merchandiseId","jsxs","Fragment","jsx","BaseButton","defaultOnClick","style","position","width","height","padding","margin","overflow","clip","whiteSpace","borderWidth","role"],"sources":["/home/martin/node_modules/.pnpm/@shopify+hydrogen-react@2023.4.0_react-dom@18.2.0_react@18.2.0_typescript@5.0.4/node_modules/@shopify/hydrogen-react/src/AddToCartButton.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {useCart} from './CartProvider.js';\nimport {useProduct} from './ProductProvider.js';\nimport {\n  BaseButton,\n  type CustomBaseButtonProps,\n  type BaseButtonProps,\n} from './BaseButton.js';\nimport * as React from 'react';\n\nexport interface AddToCartButtonPropsBase {\n  /** An array of cart line attributes that belong to the item being added to the cart. */\n  attributes?: {\n    key: string;\n    value: string;\n  }[];\n  /** The ID of the variant. */\n  variantId?: string | null;\n  /** The item quantity. */\n  quantity?: number;\n  /** The text that is announced by the screen reader when the item is being added to the cart. Used for accessibility purposes only and not displayed on the page. */\n  accessibleAddingToCartLabel?: string;\n  /** The selling plan ID of the subscription variant */\n  sellingPlanId?: string;\n}\n\nexport type AddToCartButtonProps<AsType extends React.ElementType = 'button'> =\n  AddToCartButtonPropsBase & BaseButtonProps<AsType>;\n\n/**\n * The `AddToCartButton` component renders a button that adds an item to the cart when pressed.\n * It must be a descendent of the `CartProvider` component.\n */\nexport function AddToCartButton<AsType extends React.ElementType = 'button'>(\n  props: AddToCartButtonProps<AsType>,\n): JSX.Element {\n  const [addingItem, setAddingItem] = useState<boolean>(false);\n  const {\n    variantId: explicitVariantId,\n    quantity = 1,\n    attributes,\n    sellingPlanId,\n    onClick,\n    children,\n    accessibleAddingToCartLabel,\n    ...passthroughProps\n  } = props;\n  const {status, linesAdd} = useCart();\n  const {selectedVariant} = useProduct();\n  const variantId = explicitVariantId ?? selectedVariant?.id ?? '';\n  const disabled =\n    explicitVariantId === null ||\n    variantId === '' ||\n    selectedVariant === null ||\n    addingItem ||\n    passthroughProps.disabled;\n\n  useEffect(() => {\n    if (addingItem && status === 'idle') {\n      setAddingItem(false);\n    }\n  }, [status, addingItem]);\n\n  const handleAddItem = useCallback(() => {\n    setAddingItem(true);\n    linesAdd([\n      {\n        quantity,\n        merchandiseId: variantId || '',\n        attributes,\n        sellingPlanId,\n      },\n    ]);\n  }, [linesAdd, quantity, variantId, attributes, sellingPlanId]);\n\n  return (\n    <>\n      <BaseButton\n        {...passthroughProps}\n        disabled={disabled}\n        onClick={onClick}\n        defaultOnClick={handleAddItem}\n      >\n        {children}\n      </BaseButton>\n      {accessibleAddingToCartLabel ? (\n        <p\n          style={{\n            position: 'absolute',\n            width: '1px',\n            height: '1px',\n            padding: '0',\n            margin: '-1px',\n            overflow: 'hidden',\n            clip: 'rect(0, 0, 0, 0)',\n            whiteSpace: 'nowrap',\n            borderWidth: '0',\n          }}\n          role=\"alert\"\n          aria-live=\"assertive\"\n        >\n          {addingItem ? accessibleAddingToCartLabel : null}\n        </p>\n      ) : null}\n    </>\n  );\n}\n\n// This is only for documenation purposes, and it is not used in the code.\nexport interface AddToCartButtonPropsForDocs<\n  AsType extends React.ElementType = 'button',\n> extends AddToCartButtonPropsBase,\n    CustomBaseButtonProps<AsType> {}\n"],"mappings":";;;;;AAiCO,SAASA,gBACdC,KAAA,EACa;EACb,MAAM,CAACC,UAAA,EAAYC,aAAa,IAAIC,QAAA,CAAkB,KAAK;EACrD;IACJC,SAAA,EAAWC,iBAAA;IACXC,QAAA,GAAW;IACXC,UAAA;IACAC,aAAA;IACAC,OAAA;IACAC,QAAA;IACAC,2BAAA;IACA,GAAGC;EACD,IAAAZ,KAAA;EACJ,MAAM;IAACa,MAAA;IAAQC;EAAQ,IAAIC,OAAA,CAAQ;EAC7B;IAACC;EAAA,IAAmBC,UAAA;EACpB,MAAAb,SAAA,GAAYC,iBAAA,KAAqBW,eAAA,oBAAAA,eAAA,CAAiBE,EAAA,KAAM;EACxD,MAAAC,QAAA,GACJd,iBAAA,KAAsB,QACtBD,SAAA,KAAc,MACdY,eAAA,KAAoB,QACpBf,UAAA,IACAW,gBAAA,CAAiBO,QAAA;EAEnBC,SAAA,CAAU,MAAM;IACV,IAAAnB,UAAA,IAAcY,MAAA,KAAW,QAAQ;MACnCX,aAAA,CAAc,KAAK;IACrB;EAAA,GACC,CAACW,MAAA,EAAQZ,UAAU,CAAC;EAEjB,MAAAoB,aAAA,GAAgBC,WAAA,CAAY,MAAM;IACtCpB,aAAA,CAAc,IAAI;IACTY,QAAA,EACP;MACER,QAAA;MACAiB,aAAA,EAAenB,SAAA,IAAa;MAC5BG,UAAA;MACAC;IACF,EACD;EAAA,GACA,CAACM,QAAA,EAAUR,QAAA,EAAUF,SAAA,EAAWG,UAAA,EAAYC,aAAa,CAAC;EAE7D,OAEI,eAAAgB,IAAA,CAAAC,QAAA;IAAAf,QAAA,kBAAAgB,GAAA,CAACC,UAAA;MACE,GAAGf,gBAAA;MACJO,QAAA;MACAV,OAAA;MACAmB,cAAA,EAAgBP,aAAA;MAEfX;IAAA,CACH,GACCC,2BAAA,GACC,eAAAe,GAAA,CAAC;MACCG,KAAA,EAAO;QACLC,QAAA,EAAU;QACVC,KAAA,EAAO;QACPC,MAAA,EAAQ;QACRC,OAAA,EAAS;QACTC,MAAA,EAAQ;QACRC,QAAA,EAAU;QACVC,IAAA,EAAM;QACNC,UAAA,EAAY;QACZC,WAAA,EAAa;MACf;MACAC,IAAA,EAAK;MACL,aAAU;MAET7B,QAAA,EAAAT,UAAA,GAAaU,2BAAA,GAA8B;IAAA,KAE5C;EACN;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}